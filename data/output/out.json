[
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,setupPoses(self:agent)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "pose"
                    ],
                    "name": "NONE",
                    "text": "poses"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "setup",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "poses",
                    "type": "pose"
                }
            ]
        },
        "parse": "want(brad,NONE,{NONE(pose)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "setup poses"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,defineScrewType(self:agent,m3)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "new"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "screw type"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "m3",
                    "text": "m3"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "defineItem",
                    "text": "define",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "new screw type m3",
                    "type": "name",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,defineItem(self,VAR1),{NONE(VAR1),NONE(VAR1),m3(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "define new screw type m3"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,val(150,mNm),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "150"
                },
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "millinewton meters"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "magnitude",
                    "text": "magnitude",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "150 millinewton meters",
                    "type": "number",
                    "variable_name": "VAR0"
                }
            ]
        },
        "parse": "wantbel(brad,magnitude(VAR0),{NONE(VAR0),NONE(VAR0),INDEFINITE(VAR0)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "150 millinewton meters"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,val(300,mNm),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "300"
                },
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "millinewton meters"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "torque",
                    "text": "torque",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "300 millinewton meters",
                    "type": "number"
                }
            ]
        },
        "parse": "itk(brad,torque(VAR0),{NONE(VAR0),NONE(VAR0)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "300 millinewton meters"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,val(6500,deg),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "6500 degrees"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "high",
                    "text": "high",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "temperature",
                    "type": "number",
                    "variable_name": "VAR0"
                }
            ]
        },
        "parse": "wantbel(brad,high(VAR0),{NONE(VAR0),INDEFINITE(VAR0)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "6500 degrees"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,pose(VAR0),{screw feeder(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "screw feeder",
                    "text": "screw feeder"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "pose",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "screw feeder",
                    "type": "physobj"
                }
            ]
        },
        "parse": "want(brad,NONE,{screw feeder(central)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "pose screw feeder"
    },
    {
        "desired_semantics": "STATEMENT(brad,self:agent,want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,hole(_24822)),start)),{hole(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "screw"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "hole",
                    "text": "hole"
                },
                {
                    "arguments": [
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "NONE",
                    "text": "into"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2",
                        "VAR3"
                    ],
                    "name": "teaching",
                    "text": "teaching",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "screw",
                    "type": "physobj"
                },
                {
                    "role": "supplemental",
                    "text": "hole",
                    "type": "location"
                }
            ]
        },
        "parse": "wantbel(brad,teaching(self,VAR1,VAR2,VAR3),{NONE(VAR1),hole(VAR2),NONE(VAR1,VAR2)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "i will teach you how to screw a screw into a hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,perceiveEntity(self:agent,VAR0)),{hole(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "hole",
                    "text": "hole"
                },
                {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "hole",
                    "text": "see"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "NONE",
                    "text": "first"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "verify",
                    "text": "verify",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "cognitive_status": "DEFINITE",
                    "role": "central",
                    "text": "hole",
                    "type": "physobj",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "itk(brad,verify(self,VAR1,VAR2),{hole(VAR1),hole(self,VAR1),NONE(VAR2),DEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "first verify that you can see the hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,mountScrew(self:agent,screw)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "screw"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "mountScrew",
                    "text": "mount",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "DEFINITE",
                    "role": "central",
                    "text": "screw",
                    "type": "physobj",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,mountScrew(self,VAR1),{NONE(VAR1),DEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then mount the screw"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,alignWith(self:agent,VAR0)),{hole(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "hole",
                    "text": "hole"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "alignWith",
                    "text": "align",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "DEFINITE",
                    "role": "central",
                    "text": "hole",
                    "type": "physobj",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,alignWith(self,VAR1),{hole(VAR1),DEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then align with the hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,runScrewdriverJob(self:agent,screw)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "action"
                    ],
                    "name": "NONE",
                    "text": "screwdriver job"
                },
                {
                    "arguments": [
                        "physobj."
                    ],
                    "name": "NONE",
                    "text": "screw"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "perform",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "screwdriver job",
                    "type": "action"
                },
                {
                    "role": "supplemental",
                    "text": "screw",
                    "type": "physobj."
                }
            ]
        },
        "parse": "want(brad,NONE,{NONE(action),NONE(physobj.)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then run the screwdriver job of the screw"
    },
    {
        "desired_semantics": "STATEMENT(brad,self:agent,want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,hole(_54297)),end)),{hole(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "screw"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "hole",
                    "text": "hole"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0",
                        "self",
                        "VAR2"
                    ],
                    "name": "insertion",
                    "text": "insertion",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "cognitive_status": "ACTIVATED",
                    "role": "central",
                    "text": "screw",
                    "type": "physobj",
                    "variable_name": "VAR0"
                },
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "supplemental",
                    "text": "hole",
                    "type": "location",
                    "variable_name": "VAR2"
                }
            ]
        },
        "parse": "wantbel(brad,insertion(VAR0,self,VAR2),{NONE(VAR0),hole(VAR2),ACTIVATED(VAR0),INDEFINITE(VAR2)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "that is how you screw a screw into a hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nfsv)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "new item nfsv"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "definition",
                    "text": "definition",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "new item nfsv",
                    "type": "string",
                    "variable_name": "VAR0"
                }
            ]
        },
        "parse": "itk(brad,definition(VAR0),{NONE(VAR0),INDEFINITE(VAR0)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "define new item nfsv"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,job(cbDet),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "circuit breaker"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "job"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "NONE",
                    "text": "face"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "face",
                    "text": "face",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "circuit breaker",
                    "type": "physobj",
                    "variable_name": "VAR0"
                },
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "supplemental",
                    "text": "job",
                    "type": "agent",
                    "variable_name": "VAR1"
                },
                {
                    "role": "supplemental",
                    "text": "face",
                    "type": "physobj"
                }
            ]
        },
        "parse": "itk(brad,face(VAR0,VAR1,VAR2),{NONE(VAR0),NONE(VAR1),NONE(VAR2),INDEFINITE(VAR0),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "job circuit breaker face"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,startLearningAssembleScript(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "assemble"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "how"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "teach",
                    "text": "teach",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "nfsv",
                    "type": "physobj",
                    "variable_name": "VAR1"
                },
                {
                    "role": "supplemental",
                    "text": "you",
                    "type": "agent"
                }
            ]
        },
        "parse": "wantbel(brad,teach(self,VAR1,VAR2),{NONE(VAR1),NONE(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "i will teach you how to assemble a nfsv"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,gotoCamerapose(self:agent,VAR0)),{conveyor(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "first"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "goToPose",
                    "text": "go",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "pose conveyor",
                    "type": "location",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,goToPose(self,VAR1,VAR2),{NONE(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "first go to pose conveyor"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,perceiveEntity(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "verify"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "see",
                    "text": "see",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "cognitive_status": "DEFINITE",
                    "role": "central",
                    "text": "nfsv",
                    "type": "string",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "itk(brad,see(self,VAR1,VAR2),{NONE(self,VAR1),DEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then verify that you can see the nfsv"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,getOn(self:agent,VAR0,VAR1)),{nfsv(VAR0),work area(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "action"
                    ],
                    "name": "nfsv",
                    "text": "nfsv"
                },
                {
                    "arguments": [
                        "location."
                    ],
                    "name": "work area",
                    "text": "work area"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "place",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "nfsv",
                    "type": "action"
                },
                {
                    "role": "supplemental",
                    "text": "work area",
                    "type": "location."
                }
            ]
        },
        "parse": "want(brad,NONE,{nfsv(action),work area(location.)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then get the nfsv on the work area"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,observeDescriptor(self:agent,m3,2)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "physobj"
                    ],
                    "name": "m3",
                    "text": "2 m3 holes"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "search",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "2 m3 holes",
                    "type": "physobj"
                }
            ]
        },
        "parse": "want(brad,NONE,{m3(physobj)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then search for 2 m3 holes"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,screwIn(self:agent,m3,VAR0)),{m3(VAR0),left(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "m3",
                    "text": "m3 screw"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "m3",
                    "text": "left m3 hole"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "screwScrew",
                    "text": "screw",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "m3 screw",
                    "type": "physobj",
                    "variable_name": "VAR1"
                },
                {
                    "cognitive_status": "DEFINITE",
                    "role": "supplemental",
                    "text": "left m3 hole",
                    "type": "location.",
                    "variable_name": "VAR2"
                }
            ]
        },
        "parse": "want(brad,screwScrew(self,VAR1,VAR2),{m3(VAR1),m3(VAR2),INDEFINITE(VAR1),DEFINITE(VAR2)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "screw a m3 screw into the left m3 hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,gotoCamerapose(self:agent,VAR0)),{work area(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "goToPose",
                    "text": "go",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "pose work area",
                    "type": "location",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,goToPose(self,VAR1,VAR2),{INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then go to pose work area"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,screwIn(self:agent,m3,VAR0)),{m3(VAR0),right(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "m3 screw"
                },
                {
                    "arguments": [
                        "VAR2"
                    ],
                    "name": "m3",
                    "text": "right m3 hole"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2"
                    ],
                    "name": "screwScrew",
                    "text": "screw",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "m3 screw",
                    "type": "physobj",
                    "variable_name": "VAR1"
                },
                {
                    "cognitive_status": "DEFINITE",
                    "role": "supplemental",
                    "text": "right m3 hole",
                    "type": "location.",
                    "variable_name": "VAR2"
                }
            ]
        },
        "parse": "want(brad,screwScrew(self,VAR1,VAR2),{NONE(VAR1),m3(VAR2),INDEFINITE(VAR1),DEFINITE(VAR2)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "screw a m3 screw into the right m3 hole"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,getOn(self:agent,VAR0,VAR1)),{nfsv(VAR0),conveyor(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "nfsv",
                    "text": "nfsv"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "conveyor",
                    "text": "conveyor"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "get",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "nfsv",
                    "type": "name"
                },
                {
                    "role": "supplemental",
                    "text": "conveyor",
                    "type": "physobj."
                }
            ]
        },
        "parse": "want(brad,NONE,{nfsv(central),conveyor(supplemental)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then get the nfsv on the conveyor"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,moveConveyorForward(self:agent)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "physobj"
                    ],
                    "name": "conveyor",
                    "text": "conveyor belt"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "advance",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "conveyor belt",
                    "type": "physobj"
                }
            ]
        },
        "parse": "want(brad,NONE,{conveyor(physobj)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "then advance the conveyor belt"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,endLearningAssembleScript(self:agent,VAR0))),{nfsv(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "nfsv",
                    "text": "nfsv"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1",
                        "VAR2",
                        "VAR3"
                    ],
                    "name": "assemble",
                    "text": "assemble",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "nfsv",
                    "type": "NONE",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "wantbel(brad,assemble(self,VAR1,VAR2,VAR3),{nfsv(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "that is how you assemble a nfsv"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,assemble(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "nfsv",
                    "text": "nfsv"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "assemble",
                    "text": "assemble",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "nfsv",
                    "type": "string",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,assemble(self,VAR1),{nfsv(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "assemble a nfsv"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nvfau)),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "new item nvfau",
                    "text": "new item nvfau"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "defineItem",
                    "text": "define",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "new item nvfau",
                    "type": "name",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,defineItem(self,VAR1),{new item nvfau(VAR1),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "define new item nvfau"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,job(nvDet),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "job"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "face"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0",
                        "VAR1"
                    ],
                    "name": "face_job",
                    "text": "face",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "job",
                    "type": "action",
                    "variable_name": "VAR0"
                },
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "supplemental",
                    "text": "face",
                    "type": "physobj.",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "itk(brad,face_job(VAR0,VAR1),{NONE(VAR0),NONE(VAR1),INDEFINITE(VAR0),INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "job n v face"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,modifyAssemble(self:agent,assemble(self:agent,VAR0),assemble(self:agent,VAR1))),{nvfau(VAR0),nfsv(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "nvfau",
                    "text": "nvfau"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "nfsv",
                    "text": "nfsv"
                },
                {
                    "arguments": [
                        "VAR0"
                    ],
                    "name": "NONE",
                    "text": "assemble"
                },
                {
                    "arguments": [
                        "VAR1"
                    ],
                    "name": "NONE",
                    "text": "assemble"
                }
            ],
            "intention": {
                "proposition": {
                    "arguments": [
                        "VAR0",
                        "VAR1"
                    ],
                    "name": "similarity",
                    "text": "similarity",
                    "type": "concept"
                },
                "speech_act": "wantbel"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "nvfau and nfsv",
                    "type": "NONE"
                }
            ]
        },
        "parse": "wantbel(brad,similarity(VAR0,VAR1),{nvfau(VAR0),nfsv(VAR1),NONE(VAR0),NONE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "assemble an nvfau is like assemble an nfsv"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,mod(replace(observeDescriptor(self:agent,deepM3,2),observeDescriptor(self:agent,m3,2))),{})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "deepM3",
                    "text": "search for 2 deep m3 holes"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "deepM3",
                    "text": "search for 2 m3 holes"
                },
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "deepM3",
                    "text": "deep"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "replace",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "search for 2 deep m3 holes",
                    "type": "action"
                },
                {
                    "role": "supplemental",
                    "text": "search for 2 m3 holes",
                    "type": "action."
                }
            ]
        },
        "parse": "want(brad,NONE,{deepM3(central),deepM3(supplemental),deepM3(central)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "replace search for 2 m3 holes with search for 2 deep m3 holes"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),left(VAR0),deepM3(VAR1),bottom(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "m3",
                    "text": "m3 screw"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "left",
                    "text": "left m3 hole"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "deepM3",
                    "text": "bottom deep m3 hole"
                },
                {
                    "arguments": [
                        "central",
                        "supplemental"
                    ],
                    "name": "NONE",
                    "text": "into"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "replace",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "m3 screw",
                    "type": "physobj"
                },
                {
                    "role": "supplemental",
                    "text": "left m3 hole",
                    "type": "physobj."
                },
                {
                    "role": "supplemental",
                    "text": "bottom deep m3 hole",
                    "type": "location."
                }
            ]
        },
        "parse": "want(brad,NONE,{m3(central),left(supplemental),deepM3(supplemental),NONE(central,supplemental)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "replace screw an m3 screw into the left m3 hole with screw an m3 screw into the bottom deep m3 hole"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),right(VAR0),deepM3(VAR1),top(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
        "gmr": {
            "descriptors": [
                {
                    "arguments": [
                        "central"
                    ],
                    "name": "m3",
                    "text": "m3 screw"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "right",
                    "text": "right m3 hole"
                },
                {
                    "arguments": [
                        "supplemental"
                    ],
                    "name": "deepM3",
                    "text": "top deep m3 hole"
                }
            ],
            "intention": {
                "proposition": {
                    "text": "replace",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "m3 screw",
                    "type": "physobj"
                },
                {
                    "role": "supplemental",
                    "text": "right m3 hole",
                    "type": "physobj."
                },
                {
                    "role": "supplemental",
                    "text": "top deep m3 hole",
                    "type": "location."
                }
            ]
        },
        "parse": "want(brad,NONE,{m3(central),right(supplemental),deepM3(supplemental)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "replace screw an m3 screw into the right m3 hole with screw an m3 screw into the top deep m3 hole"
    },
    {
        "desired_semantics": "UNKNOWN(brad,self:agent,mod(none),{})",
        "gmr": {
            "descriptors": [],
            "intention": {
                "proposition": {
                    "arguments": [],
                    "name": "completion",
                    "text": "completion",
                    "type": "concept"
                },
                "speech_act": "itk"
            },
            "referents": [
                {
                    "role": "central",
                    "text": "n/a",
                    "type": "NONE"
                }
            ]
        },
        "parse": "itk(brad,completion(),{})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "that is all"
    },
    {
        "desired_semantics": "INSTRUCT(brad,self:agent,want(brad,assemble(self:agent,VAR0)),{nvfau(VAR0),DEFINITE(VAR0)})",
        "gmr": {
            "descriptors": [],
            "intention": {
                "proposition": {
                    "arguments": [
                        "self",
                        "VAR1"
                    ],
                    "name": "assemble",
                    "text": "assemble",
                    "type": "action"
                },
                "speech_act": "want"
            },
            "referents": [
                {
                    "cognitive_status": "INDEFINITE",
                    "role": "central",
                    "text": "nvfau",
                    "type": "NONE",
                    "variable_name": "VAR1"
                }
            ]
        },
        "parse": "want(brad,assemble(self,VAR1),{INDEFINITE(VAR1)})",
        "robot_model": {
            "actions": [
                {
                    "description": "get step by step of action description and assert it to belief ",
                    "name": "getActDesc",
                    "roles": [
                        "?actor",
                        "?goalPred"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves and returns the first result",
                    "name": "getRefForJob",
                    "roles": [
                        "?actor",
                        "?descriptor"
                    ]
                },
                {
                    "description": "try to achieve desired state",
                    "name": "achieveState",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?tentativeAcceptSemantics",
                        "?acceptSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "?actor grabs ?physobj",
                    "name": "grab",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "defines new item, and asks for relevant parameters",
                    "name": "defineItem",
                    "roles": [
                        "?actor",
                        "?item"
                    ]
                },
                {
                    "description": "?actor releases ?physobj",
                    "name": "putdown",
                    "roles": [
                        "?actor",
                        "?physobj",
                        "?pose"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?scriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "checks if post condition is capable of bing reached by ?actor",
                    "name": "checkCapableOf",
                    "roles": [
                        "?actor",
                        "?goal"
                    ]
                },
                {
                    "description": "runs a job for the given ?descriptor and saves the results in the cognex consultant",
                    "name": "observeDescriptor",
                    "roles": [
                        "?actor",
                        "?descriptor",
                        "?numResults"
                    ]
                },
                {
                    "description": "Recursively iterates through the given ?cameraResults and binds them to references",
                    "name": "bindResultsRecursive",
                    "roles": [
                        "?actor",
                        "?job",
                        "?cameraResults",
                        "?i"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped",
                    "name": "supersedeCurrentGoal",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID",
                        "?modification",
                        "?location"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "undoThenDo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "runs a job for a given pre-existing ?refId and binds the relevant result to that reference",
                    "name": "perceiveEntityFromSymbol",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "goes to pose at camera height",
                    "name": "gotoCamerapose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Moves the conveyor belt backward",
                    "name": "moveConveyorBackward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "aligns above a screw hole by reference id",
                    "name": "alignWith",
                    "roles": [
                        "?actor",
                        "?holeRef"
                    ]
                },
                {
                    "description": "Handle NLPacket form a response",
                    "name": "handleUtterance",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?indirectSemantics",
                        "?suppSemantics"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "goes to pose without adjustment",
                    "name": "goToPose",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "Handle error semantics",
                    "name": "handleError",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?errorSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "finds and mounts a single screw to the kolver screwdriver",
                    "name": "mountSingleScrew",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "goes to pose with adjustment to the given cameraHeight the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose",
                        "?cameraHeight"
                    ]
                },
                {
                    "description": "get the system time and assert it to belief",
                    "name": "getTime",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "reply to recovery semantics",
                    "name": "handleRecovery",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?state",
                        "?recovery",
                        "?semanticType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "startLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "moves to ?pose1, from ?pose2",
                    "name": "gotocamerapose",
                    "roles": [
                        "?actor",
                        "?pose1",
                        "?pose2"
                    ]
                },
                {
                    "description": "Moves the conveyor belt forward",
                    "name": "moveConveyorForward",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "records current pose and asks for an off set",
                    "name": "recordCameraPoseAsk",
                    "roles": [
                        "?actor",
                        "?poseName"
                    ]
                },
                {
                    "description": "believe that ?fact is true from agent ?speaker",
                    "name": "believeFact",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "workaround for not being able to retract facts from belief init files",
                    "name": "init",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "classifies model in front of itself and calls relevant assemble script",
                    "name": "assembleVision",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "finds and moves above a flange of the given modelType",
                    "name": "pickUp",
                    "roles": [
                        "?actor",
                        "?objectRef"
                    ]
                },
                {
                    "description": "screws in a screw once aligned",
                    "name": "runScrewdriverJob",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "changes TCP of robot to refer to a new EE attached to the cuff at a different offset",
                    "name": "rotateToEE",
                    "roles": [
                        "?actor",
                        "?gripperType"
                    ]
                },
                {
                    "description": "assembles model for ?modelID from belief",
                    "name": "assemble",
                    "roles": [
                        "?actor",
                        "?modelID"
                    ]
                },
                {
                    "description": "reply to wantBel semantics",
                    "name": "handleWantBel",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?fact",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle semantics (direct or indirect)",
                    "name": "handleSemantics",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?listeners",
                        "?semantics",
                        "?suppSemantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "updates value of ?param to ?newValue",
                    "name": "updateParam",
                    "roles": [
                        "?actor",
                        "?paramName",
                        "?newValue"
                    ]
                },
                {
                    "description": "creates a new assembly script based on an existing one",
                    "name": "modifyAssemble",
                    "roles": [
                        "?actor",
                        "?newScriptID",
                        "?oldScriptID"
                    ]
                },
                {
                    "description": "moves up by a camera z height as defined by an inline constant",
                    "name": "moveToCameraHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "gets ?object on to the surface beneath ?destination",
                    "name": "getOn",
                    "roles": [
                        "?actor",
                        "?object",
                        "?destination"
                    ]
                },
                {
                    "description": "get list of current goals and assert it to belief",
                    "name": "getCurrGoals",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "Handle ack semantics",
                    "name": "handleAck",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Looks for an entity at the current location",
                    "name": "perceiveEntity",
                    "roles": [
                        "?actor",
                        "?refId"
                    ]
                },
                {
                    "description": "defines new type of screw for screw, and asks for relevant parameters",
                    "name": "defineScrewType",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "screws in a single hole identified by the cognex using the kolver screwdriver",
                    "name": "screwScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "moves down and up by the distance given",
                    "name": "dip",
                    "roles": [
                        "?actor",
                        "?dist"
                    ]
                },
                {
                    "description": "drops an object held by the robot grippers",
                    "name": "putDown",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?semanticType"
                    ]
                },
                {
                    "description": "stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped",
                    "name": "supersedeAndUndo",
                    "roles": [
                        "?actor",
                        "?newGoal"
                    ]
                },
                {
                    "description": "goes to pose without adjustment the long way around",
                    "name": "goToPoseLong",
                    "roles": [
                        "?actor",
                        "?pose"
                    ]
                },
                {
                    "description": "moves down by a camera z height as defined by an inline constant",
                    "name": "moveToObjectHeight",
                    "roles": [
                        "?actor"
                    ]
                },
                {
                    "description": "unsticks the screwdriver tip from a screwed in screw",
                    "name": "unstickScrewdriver",
                    "roles": [
                        "?actor",
                        "?returnTo"
                    ]
                },
                {
                    "description": "goes to the source of the given screw type and mounts one to the screwdriver",
                    "name": "mountScrew",
                    "roles": [
                        "?actor",
                        "?screwType"
                    ]
                },
                {
                    "description": "given a predicate, calls NLG pipeline to get its text from and then calls sayText action",
                    "name": "generateResponse",
                    "roles": [
                        "?actor",
                        "?listener",
                        "?semantics",
                        "?bindings",
                        "?semanticType"
                    ]
                },
                {
                    "description": "believe that ?rule is true from agent ?speaker",
                    "name": "believeRule",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?head",
                        "?body",
                        "?semanticType",
                        "?responseSemantics"
                    ]
                },
                {
                    "description": "reply to itk semantics",
                    "name": "handleITK",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?query",
                        "?semanticType"
                    ]
                },
                {
                    "description": "Handle greeting semantics",
                    "name": "handleGreeting",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?greeting",
                        "?semanticType"
                    ]
                },
                {
                    "description": "ends learning of assemble?modelName()",
                    "name": "endLearningAssembleScript",
                    "roles": [
                        "?actor",
                        "?modelName"
                    ]
                },
                {
                    "description": "get description for step of (specified by location) currently executing goal ",
                    "name": "getContextDescription",
                    "roles": [
                        "?actor",
                        "?location"
                    ]
                },
                {
                    "description": "reply to want semantics",
                    "name": "handleWant",
                    "roles": [
                        "?actor",
                        "?speaker",
                        "?addressee",
                        "?state",
                        "?semanticType"
                    ]
                }
            ],
            "concepts": [
                {
                    "name": "this",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "conveyor",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "work area",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "screw feeder",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:pose"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:context"
                    ]
                },
                {
                    "name": "doit",
                    "roles": [
                        "X:dialog"
                    ]
                },
                {
                    "name": "dothis",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "dothat",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "Xdialog:dialog"
                    ]
                },
                {
                    "name": "this",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "hole",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "m3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "deepM3",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "left",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "right",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "top",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottom",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "prop",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "bottle",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "nfsv",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "it",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "that",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "thing",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "those",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "they",
                    "roles": [
                        "X:physobj"
                    ]
                },
                {
                    "name": "these",
                    "roles": [
                        "X:physobj"
                    ]
                }
            ],
            "types": [
                "physobj",
                "agent",
                "location",
                "pose",
                "action",
                "number",
                "direction",
                "name",
                "string"
            ]
        },
        "utterance": "assemble an nvfau"
    }
]