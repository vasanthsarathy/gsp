{
  "utterances" : [ {
    "utteranceText" : "setup poses",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,setupPoses(self:agent)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "define new screw type m3",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,defineScrewType(self:agent,m3)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "150 millinewton meters",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,val(150,mNm),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its target torque in millinewton meters"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "300 millinewton meters",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,val(300,mNm),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max torque in millinewton meters"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "6500 degrees",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,val(6500,deg),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "pose screw feeder",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,pose(VAR0),{screw feeder(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "i will teach you how to screw a screw into a hole",
    "desiredSemantics" : "STATEMENT(brad,self:agent,want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,VAR0),start)),{hole(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "first verify that you can see the hole",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,perceiveEntity(self:agent,VAR0)),{hole(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then mount the screw",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,mountScrew(self:agent,screw)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then align with the hole",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,alignWith(self:agent,VAR0)),{hole(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then run the screwdriver job of the screw",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,runScrewdriverJob(self:agent,screw)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "that is how you screw a screw into a hole",
    "desiredSemantics" : "STATEMENT(brad,self:agent,want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,VAR0),end)),{hole(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "define new item nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nfsv)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "job circuit breaker face",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,job(cbDet),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "i will teach you how to assemble a nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,startLearningAssembleScript(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "first go to pose conveyor",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,gotoCamerapose(self:agent,VAR0)),{conveyor(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then verify that you can see the nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,perceiveEntity(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then get the nfsv on the work area",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,getOn(self:agent,VAR0,VAR1)),{nfsv(VAR0),work area(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then search for 2 m3 holes",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,observeDescriptor(self:agent,m3,2)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "screw a m3 screw into the left m3 hole",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,screwIn(self:agent,m3,VAR0)),{m3(VAR0),left(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then go to pose work area",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,gotoCamerapose(self:agent,VAR0)),{work area(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "screw a m3 screw into the right m3 hole",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,screwIn(self:agent,m3,VAR0)),{m3(VAR0),right(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then get the nfsv on the conveyor",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,getOn(self:agent,VAR0,VAR1)),{nfsv(VAR0),conveyor(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "then advance the conveyor belt",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,moveConveyorForward(self:agent)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "that is how you assemble a nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,endLearningAssembleScript(self:agent,VAR0))),{nfsv(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "assemble a nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,assemble(self:agent,VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "define new item nvfau",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nvfau)),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "job n v face",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,job(nvDet),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "assemble an nvfau is like assemble an nfsv",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,modifyAssemble(self:agent,assemble(self:agent,VAR0),assemble(self:agent,VAR1))),{nvfau(VAR0),nfsv(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "replace search for 2 m3 holes with search for 2 deep m3 holes",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,mod(replace(observeDescriptor(self:agent,deepM3,2),observeDescriptor(self:agent,m3,2))),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "replace screw an m3 screw into the left m3 hole with screw an m3 screw into the bottom deep m3 hole",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),left(VAR0),deepM3(VAR1),bottom(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "replace screw an m3 screw into the right m3 hole with screw an m3 screw into the top deep m3 hole",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),right(VAR0),deepM3(VAR1),top(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "that is all",
    "desiredSemantics" : "UNKNOWN(brad,self:agent,mod(none),{})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  }, {
    "utteranceText" : "assemble an nvfau",
    "desiredSemantics" : "INSTRUCT(brad,self:agent,want(brad,assemble(self:agent,VAR0)),{nvfau(VAR0),DEFINITE(VAR0)})",
    "promptInfo" : {
      "actions" : [ {
        "name" : "gotoCamerapose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose at camera height"
      }, {
        "name" : "getGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment"
      }, {
        "name" : "mountScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "goes to the source of the given screw type and mounts one to the screwdriver"
      }, {
        "name" : "defineScrewType",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "defines new type of screw for screw, and asks for relevant parameters"
      }, {
        "name" : "assemble",
        "roles" : [ "?actor", "?modelID" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "defineItem",
        "roles" : [ "?actor", "?item" ],
        "description" : "defines new item, and asks for relevant parameters"
      }, {
        "name" : "getCurrGoals",
        "roles" : [ "?actor" ],
        "description" : "get list of current goals and assert it to belief"
      }, {
        "name" : "getTime",
        "roles" : [ "?actor" ],
        "description" : "get the system time and assert it to belief"
      }, {
        "name" : "getRefForJob",
        "roles" : [ "?actor", "?descriptor" ],
        "description" : "runs a job for the given ?descriptor and saves and returns the first result"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight the long way around"
      }, {
        "name" : "recordCameraPoseAsk",
        "roles" : [ "?actor", "?poseName" ],
        "description" : "records current pose and asks for an off set"
      }, {
        "name" : "putDown",
        "roles" : [ "?actor" ],
        "description" : "drops an object held by the robot grippers"
      }, {
        "name" : "runScrewdriverJob",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a screw once aligned"
      }, {
        "name" : "rotateToEE",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : "changes TCP of robot to refer to a new EE attached to the cuff at a different offset"
      }, {
        "name" : "moveConveyorBackward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt backward"
      }, {
        "name" : "grab",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor grabs ?physobj"
      }, {
        "name" : "moveToObjectHeight",
        "roles" : [ "?actor" ],
        "description" : "moves down by a camera z height as defined by an inline constant"
      }, {
        "name" : "goToPoseLong",
        "roles" : [ "?actor", "?pose" ],
        "description" : "goes to pose without adjustment the long way around"
      }, {
        "name" : "alignWith",
        "roles" : [ "?actor", "?holeRef" ],
        "description" : "aligns above a screw hole by reference id"
      }, {
        "name" : "handleGreeting",
        "roles" : [ "?actor", "?speaker", "?addressee", "?greeting", "?semanticType" ],
        "description" : "Handle greeting semantics"
      }, {
        "name" : "assembleVision",
        "roles" : [ "?actor" ],
        "description" : "classifies model in front of itself and calls relevant assemble script"
      }, {
        "name" : "perceiveEntityFromSymbol",
        "roles" : [ "?actor", "?refId" ],
        "description" : "runs a job for a given pre-existing ?refId and binds the relevant result to that reference"
      }, {
        "name" : "endLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "ends learning of assemble?modelName()"
      }, {
        "name" : "startLearningAssembleScript",
        "roles" : [ "?actor", "?modelName" ],
        "description" : "assembles model for ?modelID from belief"
      }, {
        "name" : "gotocamerapose",
        "roles" : [ "?actor", "?pose1", "?pose2" ],
        "description" : "moves to ?pose1, from ?pose2"
      }, {
        "name" : "putdown",
        "roles" : [ "?actor", "?physobj", "?pose" ],
        "description" : "?actor releases ?physobj"
      }, {
        "name" : "perceiveEntity",
        "roles" : [ "?actor", "?refId" ],
        "description" : "Looks for an entity at the current location"
      }, {
        "name" : "getOn",
        "roles" : [ "?actor", "?object", "?destination" ],
        "description" : "gets ?object on to the surface beneath ?destination"
      }, {
        "name" : "moveToCameraHeight",
        "roles" : [ "?actor" ],
        "description" : "moves up by a camera z height as defined by an inline constant"
      }, {
        "name" : "setupPoses",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "handleAck",
        "roles" : [ "?actor", "?speaker", "?addressee", "?semanticType" ],
        "description" : "Handle ack semantics"
      }, {
        "name" : "mountSingleScrew",
        "roles" : [ "?actor" ],
        "description" : "finds and mounts a single screw to the kolver screwdriver"
      }, {
        "name" : "goToPose",
        "roles" : [ "?actor", "?pose", "?cameraHeight" ],
        "description" : "goes to pose with adjustment to the given cameraHeight"
      }, {
        "name" : "putAwayGripper",
        "roles" : [ "?actor", "?gripperType" ],
        "description" : ""
      }, {
        "name" : "screwIn",
        "roles" : [ "?actor", "?var_1", "?var_0" ],
        "description" : ""
      }, {
        "name" : "pickUp",
        "roles" : [ "?actor", "?objectRef" ],
        "description" : "finds and moves above a flange of the given modelType"
      }, {
        "name" : "translateLastGoal",
        "roles" : [ "?actor" ],
        "description" : ""
      }, {
        "name" : "moveConveyorForward",
        "roles" : [ "?actor" ],
        "description" : "Moves the conveyor belt forward"
      }, {
        "name" : "screwScrew",
        "roles" : [ "?actor", "?screwType" ],
        "description" : "screws in a single hole identified by the cognex using the kolver screwdriver"
      }, {
        "name" : "init",
        "roles" : [ "?actor" ],
        "description" : "workaround for not being able to retract facts from belief init files"
      } ],
      "properties" : [ {
        "name" : "this",
        "roles" : [ "X:context" ]
      }, {
        "name" : "it",
        "roles" : [ "X:context" ]
      }, {
        "name" : "that",
        "roles" : [ "X:context" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:context" ]
      }, {
        "name" : "those",
        "roles" : [ "X:context" ]
      }, {
        "name" : "they",
        "roles" : [ "X:context" ]
      }, {
        "name" : "these",
        "roles" : [ "X:context" ]
      }, {
        "name" : "doit",
        "roles" : [ "X:dialog" ]
      }, {
        "name" : "dothis",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "dothat",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "that",
        "roles" : [ "Xdialog:dialog" ]
      }, {
        "name" : "this",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "hole",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "m3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "deepM3",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "left",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "right",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "top",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottom",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "prop",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "bottle",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "nfsv",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "it",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "that",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "those",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "they",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "these",
        "roles" : [ "X:physobj" ]
      }, {
        "name" : "this",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "conveyor",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "work area",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "screw feeder",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "it",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "that",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "thing",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "those",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "they",
        "roles" : [ "X:pose" ]
      }, {
        "name" : "these",
        "roles" : [ "X:pose" ]
      } ],
      "activeQuestions" : [ {
        "queryFormat" : "val(X,Y)",
        "questionText" : "what is its max angle in degrees"
      }, {
        "queryFormat" : "pose(X)",
        "questionText" : "at which pose can I find m3 screws"
      }, {
        "queryFormat" : "job(X)",
        "questionText" : "which Cognex job is used to detect it"
      } ],
      "facts" : [ ],
      "states" : [ {
        "name" : "failed",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindResultsRecursive(?actor,?job,?cameraResults,?i)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateForToolRack(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAwayFromJointLimit(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "switchProgram(?actor,?id)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getStatusFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?messages)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTCPForEE(?actor,?eeType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?modelSym,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "recover(want(?speaker,?state),?recovery)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastTime(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "delay(?actor,?seconds)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "doCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resetScrewdriver(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "dip(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "failed",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "endLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateParam(?actor,?paramName,?newValue)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "at",
        "roles" : [ "?physobj", "?pose" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateGoal(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translate(?actor,?contextID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorReverse(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "free(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetThat(?actor,?requester,?predicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeAndUndo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askQuestion(?actor,?speaker,?toSay,?responseForm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCognexTarget(?actor,?results,?jobIndex)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "unknownlocation",
        "roles" : [ "?actor" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "checkCapableOf(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "closeGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?goal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverParam(?actor,?screwType,?val)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverProgram(?actor,?programID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "tell(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createCogRefWithProps(?actor,?j,?additionalProperties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMService(?actor,?service)" ]
      }, {
        "name" : "failed",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "failed",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeProperties(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "genPrompt(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAssemble(?actor,?scriptID,?modification,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openGripper(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "createBecausePredicate(?actor,?state,?listener,?justification)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGripDropoff(?actor,?s)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "free",
        "roles" : [ "?actor" ]
      }, {
        "name" : "at",
        "roles" : [ "?actor", "?pose1" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntity(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindToSurface(?actor,?goal,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getRefForJob(?actor,?descriptor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionLearningStatus(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "at",
        "roles" : [ "?refId", "!currPose" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertProperties(?actor,?ref,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)" ]
      }, {
        "name" : "object",
        "roles" : [ "?modelName", "physobj" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,?assessmentModification,!duration)" ]
      }, {
        "name" : "failed",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "unstickScrewdriver(?actor,?returnTo)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitGoal(?actor,?g)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)" ]
      }, {
        "name" : "failed",
        "roles" : [ "textsynthCompletion(?actor,?prompt)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currently(is(?actor,!tmpPred))" ]
      }, {
        "name" : "failed",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupportWithExplanation(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "textsynthCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getOn(?actor,?object,?destination)" ]
      }, {
        "name" : "failed",
        "roles" : [ "init(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acknowledge(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexReferenceForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "runScrewdriverJob(?actor,?screwType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "completion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDictionaryEntries(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assembleVision(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "startLearningAssembleScript(?actor,?modelName)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "want(?speaker,?state)", "?semanticType" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAndOrientToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,!prob)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "capableOf(?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getEmptyProps(?actor)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose1)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "believes",
        "roles" : [ "?addressee", "?fact" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getScrewdriverProgramIdFromSymbol(?actor,?s)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putAwayGripper(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordCameraPoseAsk(?actor,?poseName)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryRecency(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeRule(?actor,?speaker,?head,?body,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentContextCount(?actor)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "ack(?speaker,okay(?speaker,?actor))", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "translateLastGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "rotateToEE(?actor,?gripperType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "perceiveEntityFromSymbol(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putDown(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getMatchingResult(?actor,?toReBind,?results)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentPose(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextForGoal(?actor,?g)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getDescriptorForID(?actor,?refId)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "positReference(?actor,?properties)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveAbove(?actor,?s)" ]
      }, {
        "name" : "handledSemantics",
        "roles" : [ "?actor", "?addressee", "?speaker", "?listeners", "?semantics", "?suppSemantics", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "alternateEE(?actor,?newTCP)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveToCameraHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBelief(?actor,?belief)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "failed",
        "roles" : [ "reconnect(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBelief(?actor,?belief,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "setLLMModel(?actor,?model)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setupPoses(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getConstantMappings(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getPoseFromSymbol(?actor,?poseName)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiCompletion(?actor,?requestBody)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?chat)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveConveyorBackward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addDetectionType(?actor,?descriptor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "forgetHow(?actor,?requester,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToObjectHeight(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryCount(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "setState(?actor,?predicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoCognexOffset(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getTime(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActorFromQuery(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getContextDescription(?actor,?location)" ]
      }, {
        "name" : "failed",
        "roles" : [ "joinOnGoal(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "pickUp(?actor,?objectRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getGoalFailConditions(?actor,?gid)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "joinOnGoal(?actor,?gid,?millis)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getAllActions(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getMelfaHeader(?actor)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "contextDescription(?location,!steps)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineItem(?actor,?item)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractRule(?actor,?head,?body)" ]
      }, {
        "name" : "failed",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "holding",
        "roles" : [ "?actor", "?physobj" ]
      }, {
        "name" : "failed",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "observeDescriptor(?actor,?descriptor,?numResults)" ]
      }, {
        "name" : "failed",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "itk(?speaker,?query)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "wantBel(?speaker,?addressee,?fact)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "failed",
        "roles" : [ "modifyAction(?actor,?action,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getSuccessFromRef(?actor,?refId)" ]
      }, {
        "name" : "not",
        "roles" : [ "holding(?actor,?physobj)" ]
      }, {
        "name" : "failed",
        "roles" : [ "configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "grab(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isQuestionResponse(?actor,?speaker,?listener,?semantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "alignWith(?actor,?holeRef)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "error(?speaker,?errorSemantics)", "?semanticType" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoalStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleITK(?actor,?speaker,?addressee,?query,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "supersedeCurrentGoal(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "failed",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "defineScrewType(?actor,?screwType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getObservers(?actor,?obs)" ]
      }, {
        "name" : "failed",
        "roles" : [ "screwIn(?actor,?var_1,?var_0)" ]
      }, {
        "name" : "failed",
        "roles" : [ "mountScrew(?actor,?screwType)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)" ]
      }, {
        "name" : "handled",
        "roles" : [ "?actor", "?addressee", "greeting(?speaker,?addressee,?greeting)", "?semanticType" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "currentTime(!hour,!min)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "sayText(?actor,?text)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveZRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleAck(?actor,?speaker,?addressee,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "durationOf(?goalPred,?temporal,!duration)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "recordPose(?actor,?poseName,?surfaceHeight)" ]
      }, {
        "name" : "failed",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "acceptEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "mountSingleScrew(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "ejectEE(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "moveInPlane(?actor,?x,?y)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isRepeatedPredicate(?actor,?word,?listener,?state,?recency)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActDesc(?actor,?goalPred)" ]
      }, {
        "name" : "failed",
        "roles" : [ "querySupport(?actor,?query)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assemble(?actor,?modelID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleWant(?actor,?speaker,?addressee,?state,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "generateResponse(?actor,?listener,?semantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "undoThenDo(?actor,?newGoal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getContextFromId(?actor,?id)" ]
      }, {
        "name" : "failed",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForCognexReference(?actor,?ref)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitTTSRequest(?actor,?speaker,?listener,?utterance)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)" ]
      }, {
        "name" : "failed",
        "roles" : [ "conveyorForward(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "goToPoseLong(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "assertBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionStatus(?actor,?gid)" ]
      }, {
        "name" : "not",
        "roles" : [ "at(?actor,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "askAbout(?actor,?otherActor,?query,?returnQuery)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "queryBelief(?actor,?queries,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "actionExists(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "answerQuestion(?actor,?speaker,?listener,?answerSemantics)" ]
      }, {
        "name" : "failed",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "suspendGoal(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getGoal(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotocamerapose(?actor,?pose1,?pose2)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getModelType(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "addNotifications(?actor,?queryTerm,?callbackTerm)" ]
      }, {
        "name" : "failed",
        "roles" : [ "openaiChatCompletion(?actor,?messages)" ]
      }, {
        "name" : "knows",
        "roles" : [ "?actor", "actionDescription(?goalPred,!stepPredicate)" ]
      }, {
        "name" : "failed",
        "roles" : [ "queryLastSource(?actor,?query)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "gotoCamerapose(?actor,?pose)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "putdown(?actor,?physobj,?pose)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getActionsBySignature(?actor,?actionSignature)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalID)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCurrentGoals(?actor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveXRelative(?actor,?dist)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCognexJobForDescriptor(?actor,?descriptor)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "resumeGoal(?actor,?goalPredicate)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "observeFluent(?actor,?state)" ]
      }, {
        "name" : "failed",
        "roles" : [ "retractBeliefs(?actor,?beliefs,?memoryLevel)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "updateActionLearning(?actor,?newAction,?status)" ]
      }, {
        "name" : "failed",
        "roles" : [ "cancelGoal(?actor,?goal)" ]
      }, {
        "name" : "failed",
        "roles" : [ "estimatePerformanceMeasures(?actor,?goalPred,?temporal)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)" ]
      }, {
        "name" : "failed",
        "roles" : [ "chatCompletion(?actor,?messages)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "getActionsByEffect(?actor,?effect)" ]
      }, {
        "name" : "failed",
        "roles" : [ "waitForAck(?actor)" ]
      }, {
        "name" : "failed",
        "roles" : [ "removeActionsWithSignature(?actor,?actionSignature)" ]
      }, {
        "name" : "failed",
        "roles" : [ "achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)" ]
      }, {
        "name" : "failed",
        "roles" : [ "getCameraData(?actor,?jobName)" ]
      }, {
        "name" : "failed",
        "roles" : [ "isDiarcAgent(?actor,?agentRef)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "moveToCognexTarget(?actor,?refID)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "chatCompletion(?actor,?model,?prompt)" ]
      }, {
        "name" : "succeeded",
        "roles" : [ "listenForUtterance(?actor,?nlp)" ]
      }, {
        "name" : "failed",
        "roles" : [ "believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)" ]
      } ]
    }
  } ]
}