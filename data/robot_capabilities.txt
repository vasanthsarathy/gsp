[getPromptText]
Actions:
{name: askAbout, 
roles:[?actor,?otherActor,?query,?returnQuery]
description: 
}
{name: positReference, 
roles:[?actor,?properties]
description: 
}
{name: retractBeliefs, 
roles:[?actor,?beliefs]
description: 
}
{name: reconnect, 
roles:[?actor]
description: 
}
{name: moveToCameraHeight, 
roles:[?actor]
description: moves up by a camera z height as defined by an inline constant
}
{name: getActionsBySignature, 
roles:[?actor,?actionSignature]
description: 
}
{name: moveAwayFromJointLimit, 
roles:[?actor]
description: 
}
{name: goToPose, 
roles:[?actor,?pose]
description: goes to pose without adjustment
}
{name: screwIn, 
roles:[?actor,?var_1,?var_0]
description: 
}
{name: moveConveyorBackward, 
roles:[?actor]
description: Moves the conveyor belt backward
}
{name: injectDictionaryEntry, 
roles:[?actor,?morpheme,?type,?semantics,?cognitiveStatus]
description: 
}
{name: listenForUtterance, 
roles:[?actor,?nlp]
description: 
}
{name: moveInPlane, 
roles:[?actor,?x,?y]
description: 
}
{name: getActionsByEffect, 
roles:[?actor,?effect]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: assertBeliefs, 
roles:[?actor,?beliefs,?memoryLevel]
description: 
}
{name: handleITK, 
roles:[?actor,?speaker,?addressee,?query,?semanticType]
description: reply to itk semantics
}
{name: defineItem, 
roles:[?actor,?item]
description: defines new item, and asks for relevant parameters
}
{name: recordCameraPoseAsk, 
roles:[?actor,?poseName]
description: records current pose and asks for an off set
}
{name: putDown, 
roles:[?actor]
description: drops an object held by the robot grippers
}
{name: queryBelief, 
roles:[?actor,?query]
description: 
}
{name: retractBeliefs, 
roles:[?actor,?beliefs,?memoryLevel]
description: 
}
{name: supersedeCurrentGoal, 
roles:[?actor,?newGoal]
description: stops current goal, executes ?newGoal, replans to rexecute the goal that was stopped
}
{name: askQuestion, 
roles:[?actor,?speaker,?toSay,?responseForm]
description: 
}
{name: getCameraData, 
roles:[?actor,?jobName]
description: 
}
{name: getContextDescription, 
roles:[?actor,?location]
description: get description for step of (specified by location) currently executing goal 
}
{name: modifyAssemble, 
roles:[?actor,?newScriptID,?oldScriptID]
description: creates a new assembly script based on an existing one
}
{name: openaiCompletion, 
roles:[?actor,?modelSym,?prompt]
description: 
}
{name: alignWith, 
roles:[?actor,?holeRef]
description: aligns above a screw hole by reference id
}
{name: goToPoseLong, 
roles:[?actor,?pose]
description: goes to pose without adjustment the long way around
}
{name: addDetectionType, 
roles:[?actor,?descriptor,?jobName]
description: 
}
{name: getObservers, 
roles:[?actor,?obs]
description: 
}
{name: configureScrewdriverParam, 
roles:[?actor,?screwType,?val]
description: 
}
{name: setLLMModel, 
roles:[?actor,?model]
description: 
}
{name: perceiveEntity, 
roles:[?actor,?refId]
description: Looks for an entity at the current location
}
{name: modifyAction, 
roles:[?actor,?action,?modification,?location]
description: 
}
{name: createCogRefWithProps, 
roles:[?actor,?j,?additionalProperties]
description: 
}
{name: assertBeliefs, 
roles:[?actor,?beliefs]
description: 
}
{name: moveToObjectHeight, 
roles:[?actor]
description: moves down by a camera z height as defined by an inline constant
}
{name: retractRule, 
roles:[?actor,?head,?body,?memoryLevel]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?model,?chat]
description: 
}
{name: delay, 
roles:[?actor,?seconds]
description: 
}
{name: cancelGoal, 
roles:[?actor,?goal]
description: 
}
{name: setLLMService, 
roles:[?actor,?service]
description: 
}
{name: tell, 
roles:[?actor,?goal]
description: 
}
{name: getCurrentPose, 
roles:[?actor]
description: 
}
{name: getMelfaHeader, 
roles:[?actor]
description: 
}
{name: chatCompletion, 
roles:[?actor,?messages]
description: 
}
{name: goToPoseLong, 
roles:[?actor,?pose,?cameraHeight]
description: goes to pose with adjustment to the given cameraHeight the long way around
}
{name: moveXRelative, 
roles:[?actor,?dist]
description: 
}
{name: moveConveyorForward, 
roles:[?actor]
description: Moves the conveyor belt forward
}
{name: submitNLGRequest, 
roles:[?actor,?speaker,?listener,?semantics,?bindings]
description: 
}
{name: getActionStatus, 
roles:[?actor,?gid]
description: 
}
{name: handleRecovery, 
roles:[?actor,?speaker,?state,?recovery,?semanticType]
description: reply to recovery semantics
}
{name: suspendGoal, 
roles:[?actor,?goalPredicate]
description: 
}
{name: retractBelief, 
roles:[?actor,?belief,?memoryLevel]
description: 
}
{name: openaiCompletion, 
roles:[?actor,?requestBody]
description: 
}
{name: getCognexReferenceForID, 
roles:[?actor,?refId]
description: 
}
{name: bindResultsRecursive, 
roles:[?actor,?job,?cameraResults,?i]
description: Recursively iterates through the given ?cameraResults and binds them to references
}
{name: getConstantMappings, 
roles:[?actor]
description: 
}
{name: translateLastGoal, 
roles:[?actor]
description: 
}
{name: queryBelief, 
roles:[?actor,?queries,?memoryLevel]
description: 
}
{name: modifyAssemble, 
roles:[?actor,?newScriptID,?oldScriptID,?modification,?location]
description: creates a new assembly script based on an existing one
}
{name: querySupport, 
roles:[?actor,?query,?memoryLevel]
description: 
}
{name: observeDescriptor, 
roles:[?actor,?descriptor,?numResults]
description: runs a job for the given ?descriptor and saves the results in the cognex consultant
}
{name: getTCPForEE, 
roles:[?actor,?eeType]
description: 
}
{name: generateResponse, 
roles:[?actor,?listener,?semantics,?semanticType]
description: given a predicate, calls NLG pipeline to get its text from and then submits a say text goal with it
}
{name: sayText, 
roles:[?actor,?text]
description: 
}
{name: queryBelief, 
roles:[?actor,?queries]
description: 
}
{name: getContextFromId, 
roles:[?actor,?id]
description: 
}
{name: getActDesc, 
roles:[?actor,?goalPred]
description: get step by step of action description and assert it to belief 
}
{name: retractBelief, 
roles:[?actor,?belief]
description: 
}
{name: assemblenfsv, 
roles:[?actor,?var_0]
description: 
}
{name: getCurrentContextCount, 
roles:[?actor]
description: 
}
{name: assertBelief, 
roles:[?actor,?belief]
description: 
}
{name: chatCompletion, 
roles:[?actor,?chat]
description: 
}
{name: assertRule, 
roles:[?actor,?head,?body]
description: 
}
{name: querySupportWithExplanation, 
roles:[?actor,?query]
description: 
}
{name: handleWantBel, 
roles:[?actor,?speaker,?addressee,?fact,?semanticType]
description: reply to wantBel semantics
}
{name: perceiveEntityFromSymbol, 
roles:[?actor,?refId]
description: runs a job for a given pre-existing ?refId and binds the relevant result to that reference
}
{name: askQuestion, 
roles:[?actor,?speaker,?toSay,?responseForm]
description: 
}
{name: queryLastSource, 
roles:[?actor,?query]
description: 
}
{name: isQuestionResponse, 
roles:[?actor,?speaker,?listener,?semantics]
description: 
}
{name: querySupportWithExplanation, 
roles:[?actor,?query,?memoryLevel]
description: 
}
{name: getGoal, 
roles:[?actor,?goalPredicate]
description: 
}
{name: getTime, 
roles:[?actor]
description: get the system time and assert it to belief
}
{name: getDescriptorForID, 
roles:[?actor,?refId]
description: 
}
{name: getModelType, 
roles:[?actor]
description: 
}
{name: recordPose, 
roles:[?actor,?poseName,?surfaceHeight]
description: 
}
{name: configureScrewdriverProgram, 
roles:[?actor,?screwType,?torqueTarget,?torqueMax,?angleMax]
description: 
}
{name: createBecausePredicate, 
roles:[?actor,?state,?listener,?justification]
description: 
}
{name: setState, 
roles:[?actor,?predicate]
description: 
}
{name: supersedeAndUndo, 
roles:[?actor,?newGoal]
description: stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped
}
{name: screwScrew, 
roles:[?actor,?screwType]
description: screws in a single hole identified by the cognex using the kolver screwdriver
}
{name: getScrewdriverProgramIdFromSymbol, 
roles:[?actor,?s]
description: 
}
{name: believeRule, 
roles:[?actor,?speaker,?head,?body,?semanticType,?responseSemantics]
description: believe that ?rule is true from agent ?speaker
}
{name: setupPoses, 
roles:[?actor]
description: 
}
{name: putAwayGripper, 
roles:[?actor,?gripperType]
description: 
}
{name: getGoalStatus, 
roles:[?actor,?gid]
description: 
}
{name: getGripDropoff, 
roles:[?actor,?s]
description: 
}
{name: submitTTSRequest, 
roles:[?actor,?speaker,?listener,?utterance]
description: 
}
{name: rotateToEE, 
roles:[?actor,?gripperType]
description: changes TCP of robot to refer to a new EE attached to the cuff at a different offset
}
{name: getDictionaryEntries, 
roles:[?actor]
description: 
}
{name: openaiCompletion, 
roles:[?actor,?modelSym,?prompt]
description: 
}
{name: submitGoal, 
roles:[?actor,?g]
description: 
}
{name: handleWant, 
roles:[?actor,?speaker,?addressee,?state,?semanticType]
description: reply to want semantics
}
{name: pickUp, 
roles:[?actor,?objectRef]
description: finds and moves above a flange of the given modelType
}
{name: getContextForGoal, 
roles:[?actor,?g]
description: 
}
{name: rotateForToolRack, 
roles:[?actor]
description: 
}
{name: assertRule, 
roles:[?actor,?head,?body,?memoryLevel]
description: 
}
{name: conveyorReverse, 
roles:[?actor]
description: 
}
{name: getCognexJobForDescriptor, 
roles:[?actor,?descriptor]
description: 
}
{name: dip, 
roles:[?actor,?dist]
description: moves down and up by the distance given
}
{name: removeActionsWithSignature, 
roles:[?actor,?actionSignature]
description: 
}
{name: doCognexOffset, 
roles:[?actor]
description: 
}
{name: getStatusFromRef, 
roles:[?actor,?refId]
description: 
}
{name: getRefForJob, 
roles:[?actor,?descriptor]
description: runs a job for the given ?descriptor and saves and returns the first result
}
{name: observeFluent, 
roles:[?actor,?state]
description: 
}
{name: bindCognexResult, 
roles:[?actor,?ref,?result,?indexIntoCognexResult]
description: 
}
{name: defineScrewType, 
roles:[?actor,?screwType]
description: defines new type of screw for screw, and asks for relevant parameters
}
{name: mountSingleScrew, 
roles:[?actor]
description: finds and mounts a single screw to the kolver screwdriver
}
{name: updateParam, 
roles:[?actor,?paramName,?newValue]
description: updates value of ?param to ?newValue
}
{name: completion, 
roles:[?actor,?model,?prompt]
description: 
}
{name: getAllActions, 
roles:[?actor]
description: 
}
{name: alternateEE, 
roles:[?actor,?newTCP]
description: 
}
{name: goToPose, 
roles:[?actor,?goal]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?requestBody]
description: 
}
{name: getCognexJobForCognexReference, 
roles:[?actor,?ref]
description: 
}
{name: startLearningAssembleScript, 
roles:[?actor,?modelName]
description: assembles model for ?modelID from belief
}
{name: moveAbove, 
roles:[?actor,?s]
description: 
}
{name: waitForAck, 
roles:[?actor]
description: 
}
{name: querySupport, 
roles:[?actor,?query]
description: 
}
{name: chatCompletion, 
roles:[?actor,?model,?prompt]
description: 
}
{name: assembleVision, 
roles:[?actor]
description: classifies model in front of itself and calls relevant assemble script
}
{name: resumeGoal, 
roles:[?actor,?goalPredicate]
description: 
}
{name: assemblenvfau, 
roles:[?actor,?var_0]
description: 
}
{name: getActionLearningStatus, 
roles:[?actor,?predicate]
description: 
}
{name: getPoseFromSymbol, 
roles:[?actor,?poseName]
description: 
}
{name: moveAndOrientToCognexTarget, 
roles:[?actor,?refID]
description: 
}
{name: forgetThat, 
roles:[?actor,?requester,?predicate]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?chat]
description: 
}
{name: isRepeatedPredicate, 
roles:[?actor,?word,?listener,?state,?recency]
description: 
}
{name: resumeGoal, 
roles:[?actor,?goalID]
description: 
}
{name: queryCount, 
roles:[?actor,?query]
description: 
}
{name: closeGripper, 
roles:[?actor]
description: 
}
{name: chatCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: grab, 
roles:[?actor,?physobj,?pose]
description: ?actor grabs ?physobj
}
{name: undoThenDo, 
roles:[?actor,?newGoal]
description: stops current goal, executes ?newGoal, executes plan to 'undo' the goal that was stopped
}
{name: putdown, 
roles:[?actor,?physobj,?pose]
description: ?actor releases ?physobj
}
{name: adjustPoseToCameraHeight, 
roles:[?actor,?goal,?cameraHeight]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?model,?messages]
description: 
}
{name: forgetHow, 
roles:[?actor,?requester,?actionSignature]
description: 
}
{name: cancelGoal, 
roles:[?actor,?goalPredicate]
description: 
}
{name: gotoCamerapose, 
roles:[?actor,?pose]
description: goes to pose at camera height
}
{name: handleSemantics, 
roles:[?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType]
description: Handle semantics (direct or indirect)
}
{name: switchProgram, 
roles:[?actor,?id]
description: 
}
{name: believeFact, 
roles:[?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics]
description: believe that ?fact is true from agent ?speaker
}
{name: getEmptyProps, 
roles:[?actor]
description: 
}
{name: queryRecency, 
roles:[?actor,?query]
description: 
}
{name: suspendGoal, 
roles:[?actor,?goalID]
description: 
}
{name: actionExists, 
roles:[?actor,?goal]
description: 
}
{name: queryLastTime, 
roles:[?actor,?query]
description: 
}
{name: cancelGoal, 
roles:[?actor,?goalID]
description: 
}
{name: modifyAssemble, 
roles:[?actor,?scriptID,?modification,?location]
description: creates a new assembly script based on an existing one
}
{name: openaiCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: getCurrentGoals, 
roles:[?actor]
description: 
}
{name: moveToCognexTarget, 
roles:[?actor,?refID]
description: 
}
{name: undoCognexOffset, 
roles:[?actor]
description: 
}
{name: observeProperties, 
roles:[?actor,?query]
description: 
}
{name: submitGoal, 
roles:[?actor,?g]
description: 
}
{name: mountScrew, 
roles:[?actor,?screwType]
description: goes to the source of the given screw type and mounts one to the screwdriver
}
{name: addNotifications, 
roles:[?actor,?queryTerm,?callbackTerm]
description: 
}
{name: removeEntry, 
roles:[?actor,?name,?grammar,?meaning,?cognitiveStatus]
description: 
}
{name: conveyorForward, 
roles:[?actor]
description: 
}
{name: isDiarcAgent, 
roles:[?actor,?agentRef]
description: 
}
{name: ejectEE, 
roles:[?actor]
description: 
}
{name: acknowledge, 
roles:[?actor]
description: 
}
{name: bindToSurface, 
roles:[?actor,?goal,?surfaceHeight]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?messages]
description: 
}
{name: getGripper, 
roles:[?actor,?gripperType]
description: 
}
{name: assertProperties, 
roles:[?actor,?ref,?properties]
description: 
}
{name: openaiChatCompletion, 
roles:[?actor,?model,?prompt]
description: 
}
{name: handleError, 
roles:[?actor,?speaker,?addressee,?errorSemantics,?semanticType]
description: Handle error semantics
}
{name: joinOnGoal, 
roles:[?actor,?gid,?millis]
description: 
}
{name: getOn, 
roles:[?actor,?object,?destination]
description: 
}
{name: estimatePerformanceMeasures, 
roles:[?actor,?goalPred,?temporal,?assessmentModification]
description: 
}
{name: chatCompletion, 
roles:[?actor,?model,?chat]
description: 
}
{name: runScrewdriverProgram, 
roles:[?actor,?programID]
description: 
}
{name: completion, 
roles:[?actor,?prompt]
description: 
}
{name: assemble, 
roles:[?actor,?modelID]
description: assembles model for ?modelID from belief
}
{name: unstickScrewdriver, 
roles:[?actor,?returnTo]
description: unsticks the screwdriver tip from a screwed in screw
}
{name: achieveState, 
roles:[?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType]
description: try to achieve desired state
}
{name: assertBelief, 
roles:[?actor,?belief,?memoryLevel]
description: 
}
{name: moveZRelative, 
roles:[?actor,?dist]
description: 
}
{name: textsynthCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: handleAck, 
roles:[?actor,?speaker,?addressee,?semanticType]
description: Handle ack semantics
}
{name: translateGoal, 
roles:[?actor,?goal]
description: 
}
{name: endLearningAssembleScript, 
roles:[?actor,?modelName]
description: ends learning of assemble?modelName()
}
{name: getPromptText, 
roles:[?actor]
description: 
}
{name: resetScrewdriver, 
roles:[?actor]
description: 
}
{name: translate, 
roles:[?actor,?contextID]
description: 
}
{name: goToPose, 
roles:[?actor,?pose,?cameraHeight]
description: goes to pose with adjustment to the given cameraHeight
}
{name: textsynthCompletion, 
roles:[?actor,?model,?prompt]
description: 
}
{name: getMatchingResult, 
roles:[?actor,?toReBind,?results]
description: 
}
{name: answerQuestion, 
roles:[?actor,?speaker,?listener,?answerSemantics]
description: 
}
{name: getSuccessFromRef, 
roles:[?actor,?refId]
description: 
}
{name: getGoalFailConditions, 
roles:[?actor,?gid]
description: 
}
{name: handleUtterance, 
roles:[?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics]
description: Handle NLPacket form a response
}
{name: generateResponse, 
roles:[?actor,?listener,?semantics,?bindings,?semanticType]
description: given a predicate, calls NLG pipeline to get its text from and then calls sayText action
}
{name: runScrewdriverJob, 
roles:[?actor,?screwType]
description: screws in a screw once aligned
}
{name: joinOnGoal, 
roles:[?actor,?gid]
description: 
}
{name: openaiCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: completion, 
roles:[?actor,?model,?prompt]
description: 
}
{name: init, 
roles:[?actor]
description: workaround for not being able to retract facts from belief init files
}
{name: acceptEE, 
roles:[?actor]
description: 
}
{name: updateActionLearning, 
roles:[?actor,?newAction,?status]
description: 
}
{name: textsynthCompletion, 
roles:[?actor,?prompt]
description: 
}
{name: gotocamerapose, 
roles:[?actor,?pose1,?pose2]
description: moves to ?pose1, from ?pose2
}
{name: goToPoseLong, 
roles:[?actor,?goal]
description: 
}
{name: getActorFromQuery, 
roles:[?actor,?query]
description: 
}
{name: handleGreeting, 
roles:[?actor,?speaker,?addressee,?greeting,?semanticType]
description: Handle greeting semantics
}
{name: retractRule, 
roles:[?actor,?head,?body]
description: 
}
{name: completion, 
roles:[?actor,?prompt]
description: 
}
{name: moveToCognexTarget, 
roles:[?actor,?results,?jobIndex]
description: 
}
{name: openGripper, 
roles:[?actor]
description: 
}
{name: getCurrGoals, 
roles:[?actor]
description: get list of current goals and assert it to belief
}
{name: checkCapableOf, 
roles:[?actor,?goal]
description: checks if post condition is capable of bing reached by ?actor
}

Effects:
{name: succeeded, 
roles:[updateParam(?actor,?paramName,?newValue)]}
{name: succeeded, 
roles:[askQuestion(?actor,?speaker,?toSay,?responseForm)]}
{name: succeeded, 
roles:[assertBeliefs(?actor,?beliefs,?memoryLevel)]}
{name: failed, 
roles:[queryLastSource(?actor,?query)]}
{name: succeeded, 
roles:[observeFluent(?actor,?state)]}
{name: failed, 
roles:[runScrewdriverJob(?actor,?screwType)]}
{name: failed, 
roles:[alignWith(?actor,?holeRef)]}
{name: succeeded, 
roles:[resumeGoal(?actor)]}
{name: succeeded, 
roles:[forgetThat(?actor,?requester,?predicate)]}
{name: knows, 
roles:[?actor,mostLikelyToFailOf(?goalPred,?temporal,!mostLikely)]}
{name: succeeded, 
roles:[adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)]}
{name: failed, 
roles:[addDetectionType(?actor,?descriptor,?jobName)]}
{name: failed, 
roles:[moveZRelative(?actor,?dist)]}
{name: failed, 
roles:[handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)]}
{name: failed, 
roles:[getGoal(?actor,?goalPredicate)]}
{name: succeeded, 
roles:[goToPose(?actor,?goal)]}
{name: succeeded, 
roles:[moveToCognexTarget(?actor,?results,?jobIndex)]}
{name: failed, 
roles:[estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)]}
{name: succeeded, 
roles:[doCognexOffset(?actor)]}
{name: failed, 
roles:[waitForAck(?actor)]}
{name: succeeded, 
roles:[handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)]}
{name: succeeded, 
roles:[getActionsByEffect(?actor,?effect)]}
{name: succeeded, 
roles:[switchProgram(?actor,?id)]}
{name: succeeded, 
roles:[unstickScrewdriver(?actor,?returnTo)]}
{name: succeeded, 
roles:[endLearningAssembleScript(?actor,?modelName)]}
{name: failed, 
roles:[suspendGoal(?actor)]}
{name: failed, 
roles:[completion(?actor,?model,?prompt)]}
{name: failed, 
roles:[cancelGoal(?actor)]}
{name: failed, 
roles:[getActionsBySignature(?actor,?actionSignature)]}
{name: failed, 
roles:[forgetHow(?actor,?requester,?actionSignature)]}
{name: succeeded, 
roles:[delay(?actor,?seconds)]}
{name: succeeded, 
roles:[answerQuestion(?actor,?speaker,?listener,?answerSemantics)]}
{name: not, 
roles:[at(?actor,?pose2)]}
{name: failed, 
roles:[defineItem(?actor,?item)]}
{name: succeeded, 
roles:[ejectEE(?actor)]}
{name: succeeded, 
roles:[assemblenvfau(?actor,?var_0)]}
{name: failed, 
roles:[setLLMModel(?actor,?model)]}
{name: succeeded, 
roles:[moveAwayFromJointLimit(?actor)]}
{name: failed, 
roles:[moveInPlane(?actor,?x,?y)]}
{name: succeeded, 
roles:[removeActionsWithSignature(?actor,?actionSignature)]}
{name: failed, 
roles:[modifyAction(?actor,?action,?modification,?location)]}
{name: failed, 
roles:[observeProperties(?actor,?query)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?model,?prompt)]}
{name: failed, 
roles:[getGoalFailConditions(?actor,?gid)]}
{name: failed, 
roles:[moveAndOrientToCognexTarget(?actor,?refID)]}
{name: failed, 
roles:[moveXRelative(?actor,?dist)]}
{name: knows, 
roles:[?actor,actionDescription(?goalPred,!stepPredicate)]}
{name: succeeded, 
roles:[defineScrewType(?actor,?screwType)]}
{name: failed, 
roles:[joinOnGoal(?actor,?gid,?millis)]}
{name: succeeded, 
roles:[perceiveEntity(?actor,?refId)]}
{name: succeeded, 
roles:[acknowledge(?actor)]}
{name: knows, 
roles:[?actor,contextDescription(?location,!steps)]}
{name: succeeded, 
roles:[getObservers(?actor,?obs)]}
{name: failed, 
roles:[getModelType(?actor)]}
{name: succeeded, 
roles:[estimatePerformanceMeasures(?actor,?goalPred,?temporal)]}
{name: succeeded, 
roles:[tell(?actor,?goal)]}
{name: succeeded, 
roles:[retractBelief(?actor,?belief)]}
{name: succeeded, 
roles:[conveyorReverse(?actor)]}
{name: failed, 
roles:[supersedeCurrentGoal(?actor,?newGoal)]}
{name: succeeded, 
roles:[setLLMService(?actor,?service)]}
{name: knows, 
roles:[?actor,probabilityOf(?goalPred,?temporal,?assessmentModification,!prob)]}
{name: succeeded, 
roles:[getScrewdriverProgramIdFromSymbol(?actor,?s)]}
{name: failed, 
roles:[goToPoseLong(?actor,?pose)]}
{name: handled, 
roles:[?actor,?addressee,want(?speaker,?state),?semanticType]}
{name: succeeded, 
roles:[getDictionaryEntries(?actor)]}
{name: failed, 
roles:[cancelGoal(?actor,?goalPredicate)]}
{name: handled, 
roles:[?actor,?addressee,itk(?speaker,?query),?semanticType]}
{name: failed, 
roles:[moveConveyorBackward(?actor)]}
{name: succeeded, 
roles:[resetScrewdriver(?actor)]}
{name: succeeded, 
roles:[getCognexReferenceForID(?actor,?refId)]}
{name: succeeded, 
roles:[putdown(?actor,?physobj,?pose)]}
{name: failed, 
roles:[getContextDescription(?actor,?location)]}
{name: failed, 
roles:[retractBeliefs(?actor,?beliefs)]}
{name: failed, 
roles:[suspendGoal(?actor,?goalPredicate)]}
{name: succeeded, 
roles:[screwScrew(?actor,?screwType)]}
{name: free, 
roles:[?actor]}
{name: succeeded, 
roles:[updateActionLearning(?actor,?newAction,?status)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?chat)]}
{name: failed, 
roles:[chatCompletion(?actor,?model,?chat)]}
{name: succeeded, 
roles:[addNotifications(?actor,?queryTerm,?callbackTerm)]}
{name: succeeded, 
roles:[queryBelief(?actor,?queries)]}
{name: failed, 
roles:[setState(?actor,?predicate)]}
{name: succeeded, 
roles:[assertBelief(?actor,?belief,?memoryLevel)]}
{name: succeeded, 
roles:[querySupportWithExplanation(?actor,?query)]}
{name: failed, 
roles:[joinOnGoal(?actor,?gid)]}
{name: succeeded, 
roles:[getCurrGoals(?actor)]}
{name: failed, 
roles:[retractBelief(?actor,?belief,?memoryLevel)]}
{name: failed, 
roles:[getGripDropoff(?actor,?s)]}
{name: succeeded, 
roles:[submitGoal(?actor,?g)]}
{name: failed, 
roles:[queryBelief(?actor,?queries,?memoryLevel)]}
{name: succeeded, 
roles:[bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)]}
{name: failed, 
roles:[grab(?actor,?physobj,?pose)]}
{name: failed, 
roles:[getGripper(?actor,?gripperType)]}
{name: failed, 
roles:[getActionStatus(?actor,?gid)]}
{name: succeeded, 
roles:[resumeGoal(?actor,?goalPredicate)]}
{name: failed, 
roles:[handleWant(?actor,?speaker,?addressee,?state,?semanticType)]}
{name: at, 
roles:[?actor,?pose1]}
{name: failed, 
roles:[believeFact(?actor,?speaker,?addressee,?fact,?semanticType)]}
{name: failed, 
roles:[getConstantMappings(?actor)]}
{name: failed, 
roles:[goToPose(?actor,?pose)]}
{name: failed, 
roles:[observeDescriptor(?actor,?descriptor,?numResults)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?model,?messages)]}
{name: failed, 
roles:[believeRule(?actor,?speaker,?head,?body,?semanticType)]}
{name: succeeded, 
roles:[queryLastTime(?actor,?query)]}
{name: succeeded, 
roles:[bindResultsRecursive(?actor,?job,?cameraResults,?i)]}
{name: failed, 
roles:[retractRule(?actor,?head,?body)]}
{name: succeeded, 
roles:[listenForUtterance(?actor,?nlp)]}
{name: succeeded, 
roles:[chatCompletion(?actor,?chat)]}
{name: succeeded, 
roles:[chatCompletion(?actor,?model,?prompt)]}
{name: succeeded, 
roles:[modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)]}
{name: failed, 
roles:[handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)]}
{name: succeeded, 
roles:[getTCPForEE(?actor,?eeType)]}
{name: failed, 
roles:[recordPose(?actor,?poseName,?surfaceHeight)]}
{name: failed, 
roles:[handleAck(?actor,?speaker,?addressee,?semanticType)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?model,?chat)]}
{name: succeeded, 
roles:[moveToCognexTarget(?actor,?refID)]}
{name: failed, 
roles:[moveToCameraHeight(?actor)]}
{name: succeeded, 
roles:[getActDesc(?actor,?goalPred)]}
{name: succeeded, 
roles:[submitTTSRequest(?actor,?speaker,?listener,?utterance)]}
{name: failed, 
roles:[mountSingleScrew(?actor)]}
{name: succeeded, 
roles:[startLearningAssembleScript(?actor,?modelName)]}
{name: succeeded, 
roles:[gotoCamerapose(?actor,?pose)]}
{name: succeeded, 
roles:[injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)]}
{name: succeeded, 
roles:[cancelGoal(?actor,?goalPredicate)]}
{name: succeeded, 
roles:[suspendGoal(?actor,?goalPredicate)]}
{name: failed, 
roles:[assertBelief(?actor,?belief,?memoryLevel)]}
{name: knows, 
roles:[?actor,capableOf(?goal)]}
{name: failed, 
roles:[getOn(?actor,?object,?destination)]}
{name: failed, 
roles:[resetScrewdriver(?actor)]}
{name: failed, 
roles:[openaiCompletion(?actor,?requestBody)]}
{name: succeeded, 
roles:[assertBelief(?actor,?belief)]}
{name: succeeded, 
roles:[screwIn(?actor,?var_1,?var_0)]}
{name: failed, 
roles:[getAllActions(?actor)]}
{name: succeeded, 
roles:[getGripDropoff(?actor,?s)]}
{name: failed, 
roles:[getDictionaryEntries(?actor)]}
{name: failed, 
roles:[checkCapableOf(?actor,?goal)]}
{name: succeeded, 
roles:[mountScrew(?actor,?screwType)]}
{name: handledSemantics, 
roles:[?actor,?addressee,?speaker,?listeners,?semantics,?suppSemantics,?semanticType]}
{name: failed, 
roles:[closeGripper(?actor)]}
{name: succeeded, 
roles:[assemble(?actor,?modelID)]}
{name: failed, 
roles:[queryBelief(?actor,?query)]}
{name: succeeded, 
roles:[getGripper(?actor,?gripperType)]}
{name: succeeded, 
roles:[getPoseFromSymbol(?actor,?poseName)]}
{name: succeeded, 
roles:[assemblenfsv(?actor,?var_0)]}
{name: succeeded, 
roles:[handleUtterance(?actor,?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)]}
{name: failed, 
roles:[getTCPForEE(?actor,?eeType)]}
{name: succeeded, 
roles:[isDiarcAgent(?actor,?agentRef)]}
{name: succeeded, 
roles:[getPromptText(?actor)]}
{name: failed, 
roles:[generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)]}
{name: failed, 
roles:[putAwayGripper(?actor,?gripperType)]}
{name: failed, 
roles:[queryRecency(?actor,?query)]}
{name: succeeded, 
roles:[getCameraData(?actor,?jobName)]}
{name: knows, 
roles:[?actor,currently(is(?actor,!tmpPred))]}
{name: failed, 
roles:[alternateEE(?actor,?newTCP)]}
{name: succeeded, 
roles:[querySupport(?actor,?query)]}
{name: failed, 
roles:[assertRule(?actor,?head,?body,?memoryLevel)]}
{name: succeeded, 
roles:[actionExists(?actor,?goal)]}
{name: succeeded, 
roles:[cancelGoal(?actor,?goal)]}
{name: failed, 
roles:[queryLastTime(?actor,?query)]}
{name: succeeded, 
roles:[sayText(?actor,?text)]}
{name: succeeded, 
roles:[getRefForJob(?actor,?descriptor)]}
{name: succeeded, 
roles:[undoCognexOffset(?actor)]}
{name: succeeded, 
roles:[observeDescriptor(?actor,?descriptor,?numResults)]}
{name: failed, 
roles:[rotateForToolRack(?actor)]}
{name: failed, 
roles:[querySupportWithExplanation(?actor,?query,?memoryLevel)]}
{name: succeeded, 
roles:[getContextFromId(?actor,?id)]}
{name: succeeded, 
roles:[conveyorForward(?actor)]}
{name: failed, 
roles:[reconnect(?actor)]}
{name: failed, 
roles:[startLearningAssembleScript(?actor,?modelName)]}
{name: succeeded, 
roles:[retractBeliefs(?actor,?beliefs,?memoryLevel)]}
{name: succeeded, 
roles:[acceptEE(?actor)]}
{name: succeeded, 
roles:[believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)]}
{name: succeeded, 
roles:[getTime(?actor)]}
{name: believes, 
roles:[?addressee,?fact]}
{name: succeeded, 
roles:[getMelfaHeader(?actor)]}
{name: failed, 
roles:[runScrewdriverProgram(?actor,?programID)]}
{name: failed, 
roles:[perceiveEntityFromSymbol(?actor,?refId)]}
{name: succeeded, 
roles:[getGoal(?actor,?goalPredicate)]}
{name: succeeded, 
roles:[suspendGoal(?actor,?goalID)]}
{name: succeeded, 
roles:[isQuestionResponse(?actor,?speaker,?listener,?semantics)]}
{name: succeeded, 
roles:[dip(?actor,?dist)]}
{name: failed, 
roles:[delay(?actor,?seconds)]}
{name: succeeded, 
roles:[supersedeAndUndo(?actor,?newGoal)]}
{name: failed, 
roles:[createBecausePredicate(?actor,?state,?listener,?justification)]}
{name: failed, 
roles:[queryCount(?actor,?query)]}
{name: failed, 
roles:[adjustPoseToCameraHeight(?actor,?goal,?cameraHeight)]}
{name: failed, 
roles:[translateLastGoal(?actor)]}
{name: succeeded, 
roles:[handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)]}
{name: failed, 
roles:[assertBeliefs(?actor,?beliefs)]}
{name: succeeded, 
roles:[chatCompletion(?actor,?prompt)]}
{name: succeeded, 
roles:[cancelGoal(?actor)]}
{name: failed, 
roles:[getEmptyProps(?actor)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?requestBody)]}
{name: failed, 
roles:[openGripper(?actor)]}
{name: succeeded, 
roles:[cancelGoal(?actor,?goalID)]}
{name: failed, 
roles:[getMatchingResult(?actor,?toReBind,?results)]}
{name: failed, 
roles:[setupPoses(?actor)]}
{name: succeeded, 
roles:[configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)]}
{name: succeeded, 
roles:[getCurrentGoals(?actor)]}
{name: succeeded, 
roles:[modifyAction(?actor,?action,?modification,?location)]}
{name: succeeded, 
roles:[getCognexJobForDescriptor(?actor,?descriptor)]}
{name: succeeded, 
roles:[getCurrentContextCount(?actor)]}
{name: failed, 
roles:[openaiCompletion(?actor,?prompt)]}
{name: succeeded, 
roles:[getStatusFromRef(?actor,?refId)]}
{name: succeeded, 
roles:[moveZRelative(?actor,?dist)]}
{name: succeeded, 
roles:[goToPoseLong(?actor,?goal)]}
{name: succeeded, 
roles:[translateGoal(?actor,?goal)]}
{name: failed, 
roles:[handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)]}
{name: unknownlocation, 
roles:[?actor]}
{name: failed, 
roles:[textsynthCompletion(?actor,?model,?prompt)]}
{name: succeeded, 
roles:[getSuccessFromRef(?actor,?refId)]}
{name: failed, 
roles:[completion(?actor,?prompt)]}
{name: failed, 
roles:[openaiCompletion(?actor,?modelSym,?prompt)]}
{name: succeeded, 
roles:[getDescriptorForID(?actor,?refId)]}
{name: succeeded, 
roles:[removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)]}
{name: failed, 
roles:[modifyAssemble(?actor,?scriptID,?modification,?location)]}
{name: succeeded, 
roles:[undoThenDo(?actor,?newGoal)]}
{name: failed, 
roles:[recordCameraPoseAsk(?actor,?poseName)]}
{name: failed, 
roles:[goToPoseLong(?actor,?pose,?cameraHeight)]}
{name: succeeded, 
roles:[retractRule(?actor,?head,?body,?memoryLevel)]}
{name: failed, 
roles:[retractBelief(?actor,?belief)]}
{name: succeeded, 
roles:[getActorFromQuery(?actor,?query)]}
{name: failed, 
roles:[positReference(?actor,?properties)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?prompt)]}
{name: failed, 
roles:[modifyAssemble(?actor,?newScriptID,?oldScriptID)]}
{name: failed, 
roles:[getScrewdriverProgramIdFromSymbol(?actor,?s)]}
{name: failed, 
roles:[putDown(?actor)]}
{name: succeeded, 
roles:[createCogRefWithProps(?actor,?j,?additionalProperties)]}
{name: succeeded, 
roles:[configureScrewdriverParam(?actor,?screwType,?val)]}
{name: succeeded, 
roles:[moveToObjectHeight(?actor)]}
{name: succeeded, 
roles:[pickUp(?actor,?objectRef)]}
{name: handled, 
roles:[?actor,utterance(?speaker,?addressee,?listeners,?semantics,?indirectSemantics,?suppSemantics)]}
{name: succeeded, 
roles:[supersedeCurrentGoal(?actor,?newGoal)]}
{name: succeeded, 
roles:[translate(?actor,?contextID)]}
{name: failed, 
roles:[getContextForGoal(?actor,?g)]}
{name: succeeded, 
roles:[alignWith(?actor,?holeRef)]}
{name: failed, 
roles:[assembleVision(?actor)]}
{name: at, 
roles:[?refId,!currPose]}
{name: succeeded, 
roles:[getGoalStatus(?actor,?gid)]}
{name: object, 
roles:[?modelName,physobj]}
{name: succeeded, 
roles:[isRepeatedPredicate(?actor,?word,?listener,?state,?recency)]}
{name: failed, 
roles:[goToPose(?actor,?pose,?cameraHeight)]}
{name: failed, 
roles:[querySupport(?actor,?query,?memoryLevel)]}
{name: succeeded, 
roles:[moveInPlane(?actor,?x,?y)]}
{name: failed, 
roles:[init(?actor)]}
{name: failed, 
roles:[handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?requestBody)]}
{name: failed, 
roles:[resumeGoal(?actor,?goalPredicate)]}
{name: succeeded, 
roles:[retractBeliefs(?actor,?beliefs)]}
{name: knows, 
roles:[?actor,probabilityOf(?goalPred,?temporal,!prob)]}
{name: not, 
roles:[at(?actor,?pose1)]}
{name: succeeded, 
roles:[handleWantBel(?actor,?speaker,?addressee,?fact,?semanticType)]}
{name: succeeded, 
roles:[perceiveEntityFromSymbol(?actor,?refId)]}
{name: succeeded, 
roles:[getContextDescription(?actor,?location)]}
{name: failed, 
roles:[putdown(?actor,?physobj,?pose)]}
{name: failed, 
roles:[getSuccessFromRef(?actor,?refId)]}
{name: succeeded, 
roles:[goToPoseLong(?actor,?pose)]}
{name: failed, 
roles:[getCognexReferenceForID(?actor,?refId)]}
{name: failed, 
roles:[screwScrew(?actor,?screwType)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?messages)]}
{name: knows, 
roles:[?actor,mostLikelyToFailOf(?goalPred,?temporal,?assessmentModification,!mostLikely)]}
{name: failed, 
roles:[acknowledge(?actor)]}
{name: succeeded, 
roles:[chatCompletion(?actor,?model,?chat)]}
{name: failed, 
roles:[getActionLearningStatus(?actor,?predicate)]}
{name: failed, 
roles:[getCurrGoals(?actor)]}
{name: failed, 
roles:[assertProperties(?actor,?ref,?properties)]}
{name: not, 
roles:[at(?physobj,?pose)]}
{name: succeeded, 
roles:[getGoal(?actor)]}
{name: failed, 
roles:[getObservers(?actor,?obs)]}
{name: failed, 
roles:[isQuestionResponse(?actor,?speaker,?listener,?semantics)]}
{name: failed, 
roles:[defineScrewType(?actor,?screwType)]}
{name: succeeded, 
roles:[joinOnGoal(?actor,?gid,?millis)]}
{name: failed, 
roles:[moveConveyorForward(?actor)]}
{name: failed, 
roles:[textsynthCompletion(?actor,?prompt)]}
{name: succeeded, 
roles:[textsynthCompletion(?actor,?model,?prompt)]}
{name: succeeded, 
roles:[getGoalFailConditions(?actor,?gid)]}
{name: failed, 
roles:[configureScrewdriverProgram(?actor,?screwType,?torqueTarget,?torqueMax,?angleMax)]}
{name: at, 
roles:[?physobj,?pose]}
{name: failed, 
roles:[bindToSurface(?actor,?goal,?surfaceHeight)]}
{name: succeeded, 
roles:[setupPoses(?actor)]}
{name: succeeded, 
roles:[setState(?actor,?predicate)]}
{name: succeeded, 
roles:[retractBelief(?actor,?belief,?memoryLevel)]}
{name: succeeded, 
roles:[rotateToEE(?actor,?gripperType)]}
{name: failed, 
roles:[undoThenDo(?actor,?newGoal)]}
{name: succeeded, 
roles:[getConstantMappings(?actor)]}
{name: succeeded, 
roles:[translateLastGoal(?actor)]}
{name: succeeded, 
roles:[handleWant(?actor,?speaker,?addressee,?state,?semanticType)]}
{name: succeeded, 
roles:[askAbout(?actor,?otherActor,?query,?returnQuery)]}
{name: failed, 
roles:[queryBelief(?actor,?queries)]}
{name: succeeded, 
roles:[moveConveyorBackward(?actor)]}
{name: failed, 
roles:[modifyAssemble(?actor,?newScriptID,?oldScriptID,?modification,?location)]}
{name: not, 
roles:[at(?actor,?pose2)]}
{name: succeeded, 
roles:[believeRule(?actor,?speaker,?head,?body,?semanticType)]}
{name: succeeded, 
roles:[believeFact(?actor,?speaker,?addressee,?fact,?semanticType)]}
{name: succeeded, 
roles:[setLLMModel(?actor,?model)]}
{name: succeeded, 
roles:[recordCameraPoseAsk(?actor,?poseName)]}
{name: failed, 
roles:[bindCognexResult(?actor,?ref,?result,?indexIntoCognexResult)]}
{name: failed, 
roles:[submitGoal(?actor,?g)]}
{name: succeeded, 
roles:[moveToCameraHeight(?actor)]}
{name: succeeded, 
roles:[assertRule(?actor,?head,?body)]}
{name: succeeded, 
roles:[generateResponse(?actor,?listener,?semantics,?semanticType)]}
{name: succeeded, 
roles:[goToPoseLong(?actor,?pose,?cameraHeight)]}
{name: succeeded, 
roles:[recordPose(?actor,?poseName,?surfaceHeight)]}
{name: succeeded, 
roles:[handleAck(?actor,?speaker,?addressee,?semanticType)]}
{name: failed, 
roles:[goToPose(?actor,?goal)]}
{name: succeeded, 
roles:[achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)]}
{name: failed, 
roles:[getActionsByEffect(?actor,?effect)]}
{name: failed, 
roles:[updateActionLearning(?actor,?newAction,?status)]}
{name: succeeded, 
roles:[chatCompletion(?actor,?messages)]}
{name: succeeded, 
roles:[joinOnGoal(?actor,?gid)]}
{name: failed, 
roles:[believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)]}
{name: succeeded, 
roles:[waitForAck(?actor)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?chat)]}
{name: failed, 
roles:[addNotifications(?actor,?queryTerm,?callbackTerm)]}
{name: succeeded, 
roles:[getMatchingResult(?actor,?toReBind,?results)]}
{name: succeeded, 
roles:[getContextForGoal(?actor,?g)]}
{name: failed, 
roles:[retractRule(?actor,?head,?body,?memoryLevel)]}
{name: succeeded, 
roles:[getActionsBySignature(?actor,?actionSignature)]}
{name: succeeded, 
roles:[queryLastSource(?actor,?query)]}
{name: succeeded, 
roles:[completion(?actor,?model,?prompt)]}
{name: failed, 
roles:[gotoCamerapose(?actor,?pose)]}
{name: failed, 
roles:[injectDictionaryEntry(?actor,?morpheme,?type,?semantics,?cognitiveStatus)]}
{name: failed, 
roles:[conveyorReverse(?actor)]}
{name: failed, 
roles:[handleITK(?actor,?speaker,?addressee,?query,?semanticType)]}
{name: failed, 
roles:[updateParam(?actor,?paramName,?newValue)]}
{name: succeeded, 
roles:[suspendGoal(?actor)]}
{name: failed, 
roles:[unstickScrewdriver(?actor,?returnTo)]}
{name: succeeded, 
roles:[getCurrentPose(?actor)]}
{name: failed, 
roles:[resumeGoal(?actor)]}
{name: holding, 
roles:[?actor,?physobj]}
{name: handled, 
roles:[?actor,?addressee,greeting(?speaker,?addressee,?greeting),?semanticType]}
{name: succeeded, 
roles:[runScrewdriverJob(?actor,?screwType)]}
{name: failed, 
roles:[observeFluent(?actor,?state)]}
{name: failed, 
roles:[resumeGoal(?actor,?goalID)]}
{name: failed, 
roles:[tell(?actor,?goal)]}
{name: failed, 
roles:[moveToCognexTarget(?actor,?results,?jobIndex)]}
{name: succeeded, 
roles:[estimatePerformanceMeasures(?actor,?goalPred,?temporal,?assessmentModification)]}
{name: succeeded, 
roles:[openaiChatCompletion(?actor,?model,?chat)]}
{name: handled, 
roles:[?actor,recover(want(?speaker,?state),?recovery),?semanticType]}
{name: failed, 
roles:[chatCompletion(?actor,?chat)]}
{name: not, 
roles:[at(?actor,?pose)]}
{name: failed, 
roles:[assertBelief(?actor,?belief)]}
{name: failed, 
roles:[endLearningAssembleScript(?actor,?modelName)]}
{name: failed, 
roles:[switchProgram(?actor,?id)]}
{name: failed, 
roles:[doCognexOffset(?actor)]}
{name: not, 
roles:[holding(?actor,?physobj)]}
{name: succeeded, 
roles:[goToPose(?actor,?pose)]}
{name: succeeded, 
roles:[gotocamerapose(?actor,?pose1,?pose2)]}
{name: failed, 
roles:[ejectEE(?actor)]}
{name: succeeded, 
roles:[querySupportWithExplanation(?actor,?query,?memoryLevel)]}
{name: knows, 
roles:[?actor,currentTime(!hour,!min)]}
{name: succeeded, 
roles:[queryRecency(?actor,?query)]}
{name: failed, 
roles:[moveAbove(?actor,?s)]}
{name: failed, 
roles:[getMelfaHeader(?actor)]}
{name: failed, 
roles:[assemblenvfau(?actor,?var_0)]}
{name: failed, 
roles:[setLLMService(?actor,?service)]}
{name: succeeded, 
roles:[submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)]}
{name: succeeded, 
roles:[grab(?actor,?physobj,?pose)]}
{name: succeeded, 
roles:[queryBelief(?actor,?queries,?memoryLevel)]}
{name: succeeded, 
roles:[alternateEE(?actor,?newTCP)]}
{name: succeeded, 
roles:[getCognexJobForCognexReference(?actor,?ref)]}
{name: failed, 
roles:[getPoseFromSymbol(?actor,?poseName)]}
{name: succeeded, 
roles:[getModelType(?actor)]}
{name: failed, 
roles:[getTime(?actor)]}
{name: failed, 
roles:[getRefForJob(?actor,?descriptor)]}
{name: succeeded, 
roles:[moveAndOrientToCognexTarget(?actor,?refID)]}
{name: knows, 
roles:[?actor,durationOf(?goalPred,?temporal,?assessmentModification,!duration)]}
{name: failed, 
roles:[undoCognexOffset(?actor)]}
{name: failed, 
roles:[perceiveEntity(?actor,?refId)]}
{name: succeeded, 
roles:[moveXRelative(?actor,?dist)]}
{name: succeeded, 
roles:[mountSingleScrew(?actor)]}
{name: succeeded, 
roles:[resumeGoal(?actor,?goalID)]}
{name: failed, 
roles:[supersedeAndUndo(?actor,?newGoal)]}
{name: failed, 
roles:[gotocamerapose(?actor,?pose1,?pose2)]}
{name: succeeded, 
roles:[getActionStatus(?actor,?gid)]}
{name: succeeded, 
roles:[openGripper(?actor)]}
{name: failed, 
roles:[cancelGoal(?actor,?goalID)]}
{name: succeeded, 
roles:[assembleVision(?actor)]}
{name: succeeded, 
roles:[handleITK(?actor,?speaker,?addressee,?query,?semanticType)]}
{name: succeeded, 
roles:[goToPose(?actor,?pose,?cameraHeight)]}
{name: failed, 
roles:[dip(?actor,?dist)]}
{name: succeeded, 
roles:[querySupport(?actor,?query,?memoryLevel)]}
{name: failed, 
roles:[getStatusFromRef(?actor,?refId)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?model,?prompt)]}
{name: failed, 
roles:[chatCompletion(?actor,?messages)]}
{name: failed, 
roles:[getCurrentPose(?actor)]}
{name: succeeded, 
roles:[reconnect(?actor)]}
{name: failed, 
roles:[querySupportWithExplanation(?actor,?query)]}
{name: failed, 
roles:[actionExists(?actor,?goal)]}
{name: succeeded, 
roles:[observeProperties(?actor,?query)]}
{name: succeeded, 
roles:[openaiCompletion(?actor,?prompt)]}
{name: succeeded, 
roles:[assertBeliefs(?actor,?beliefs)]}
{name: failed, 
roles:[handleSemantics(?actor,?speaker,?addressee,?listeners,?semantics,?suppSemantics,?semanticType)]}
{name: failed, 
roles:[suspendGoal(?actor,?goalID)]}
{name: failed, 
roles:[assertRule(?actor,?head,?body)]}
{name: succeeded, 
roles:[positReference(?actor,?properties)]}
{name: succeeded, 
roles:[createBecausePredicate(?actor,?state,?listener,?justification)]}
{name: handled, 
roles:[?actor,?addressee,ack(?speaker,okay(?speaker,?actor)),?semanticType]}
{name: failed, 
roles:[getCurrentContextCount(?actor)]}
{name: failed, 
roles:[chatCompletion(?actor,?model,?prompt)]}
{name: succeeded, 
roles:[modifyAssemble(?actor,?scriptID,?modification,?location)]}
{name: failed, 
roles:[getActDesc(?actor,?goalPred)]}
{name: succeeded, 
roles:[defineItem(?actor,?item)]}
{name: failed, 
roles:[removeEntry(?actor,?name,?grammar,?meaning,?cognitiveStatus)]}
{name: failed, 
roles:[bindResultsRecursive(?actor,?job,?cameraResults,?i)]}
{name: failed, 
roles:[submitNLGRequest(?actor,?speaker,?listener,?semantics,?bindings)]}
{name: failed, 
roles:[submitTTSRequest(?actor,?speaker,?listener,?utterance)]}
{name: failed, 
roles:[translateGoal(?actor,?goal)]}
{name: succeeded, 
roles:[handleRecovery(?actor,?speaker,?state,?recovery,?semanticType)]}
{name: failed, 
roles:[getDescriptorForID(?actor,?refId)]}
{name: failed, 
roles:[isRepeatedPredicate(?actor,?word,?listener,?state,?recency)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?model,?messages)]}
{name: failed, 
roles:[pickUp(?actor,?objectRef)]}
{name: failed, 
roles:[goToPoseLong(?actor,?goal)]}
{name: succeeded, 
roles:[retractRule(?actor,?head,?body)]}
{name: succeeded, 
roles:[putDown(?actor)]}
{name: succeeded, 
roles:[getEmptyProps(?actor)]}
{name: failed, 
roles:[configureScrewdriverParam(?actor,?screwType,?val)]}
{name: failed, 
roles:[translate(?actor,?contextID)]}
{name: failed, 
roles:[screwIn(?actor,?var_1,?var_0)]}
{name: failed, 
roles:[getCognexJobForCognexReference(?actor,?ref)]}
{name: succeeded, 
roles:[moveAbove(?actor,?s)]}
{name: failed, 
roles:[createCogRefWithProps(?actor,?j,?additionalProperties)]}
{name: failed, 
roles:[moveToCognexTarget(?actor,?refID)]}
{name: failed, 
roles:[getActorFromQuery(?actor,?query)]}
{name: failed, 
roles:[forgetThat(?actor,?requester,?predicate)]}
{name: failed, 
roles:[listenForUtterance(?actor,?nlp)]}
{name: succeeded, 
roles:[getAllActions(?actor)]}
{name: failed, 
roles:[assertBeliefs(?actor,?beliefs,?memoryLevel)]}
{name: failed, 
roles:[askQuestion(?actor,?speaker,?toSay,?responseForm)]}
{name: failed, 
roles:[askAbout(?actor,?otherActor,?query,?returnQuery)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?messages)]}
{name: succeeded, 
roles:[openaiCompletion(?actor,?requestBody)]}
{name: failed, 
roles:[getGoal(?actor)]}
{name: failed, 
roles:[getGoalStatus(?actor,?gid)]}
{name: succeeded, 
roles:[getActionLearningStatus(?actor,?predicate)]}
{name: succeeded, 
roles:[init(?actor)]}
{name: succeeded, 
roles:[believeRule(?actor,?speaker,?head,?body,?semanticType,?responseSemantics)]}
{name: failed, 
roles:[rotateToEE(?actor,?gripperType)]}
{name: succeeded, 
roles:[closeGripper(?actor)]}
{name: succeeded, 
roles:[getOn(?actor,?object,?destination)]}
{name: failed, 
roles:[assemblenfsv(?actor,?var_0)]}
{name: succeeded, 
roles:[modifyAssemble(?actor,?newScriptID,?oldScriptID)]}
{name: failed, 
roles:[mountScrew(?actor,?screwType)]}
{name: failed, 
roles:[moveToObjectHeight(?actor)]}
{name: failed, 
roles:[handleError(?actor,?speaker,?addressee,?errorSemantics,?semanticType)]}
{name: succeeded, 
roles:[moveConveyorForward(?actor)]}
{name: succeeded, 
roles:[checkCapableOf(?actor,?goal)]}
{name: succeeded, 
roles:[queryBelief(?actor,?query)]}
{name: succeeded, 
roles:[forgetHow(?actor,?requester,?actionSignature)]}
{name: failed, 
roles:[removeActionsWithSignature(?actor,?actionSignature)]}
{name: failed, 
roles:[cancelGoal(?actor,?goal)]}
{name: succeeded, 
roles:[textsynthCompletion(?actor,?prompt)]}
{name: not, 
roles:[free(?actor)]}
{name: failed, 
roles:[assemble(?actor,?modelID)]}
{name: succeeded, 
roles:[rotateForToolRack(?actor)]}
{name: succeeded, 
roles:[handleGreeting(?actor,?speaker,?addressee,?greeting,?semanticType)]}
{name: handled, 
roles:[?actor,?addressee,wantBel(?speaker,?addressee,?fact),?semanticType]}
{name: failed, 
roles:[moveAwayFromJointLimit(?actor)]}
{name: failed, 
roles:[openaiChatCompletion(?actor,?prompt)]}
{name: succeeded, 
roles:[assertRule(?actor,?head,?body,?memoryLevel)]}
{name: failed, 
roles:[querySupport(?actor,?query)]}
{name: failed, 
roles:[getContextFromId(?actor,?id)]}
{name: failed, 
roles:[generateResponse(?actor,?listener,?semantics,?semanticType)]}
{name: succeeded, 
roles:[openaiCompletion(?actor,?modelSym,?prompt)]}
{name: succeeded, 
roles:[completion(?actor,?prompt)]}
{name: succeeded, 
roles:[generateResponse(?actor,?listener,?semantics,?bindings,?semanticType)]}
{name: handled, 
roles:[?actor,?addressee,error(?speaker,?errorSemantics),?semanticType]}
{name: failed, 
roles:[estimatePerformanceMeasures(?actor,?goalPred,?temporal)]}
{name: failed, 
roles:[answerQuestion(?actor,?speaker,?listener,?answerSemantics)]}
{name: failed, 
roles:[achieveState(?actor,?speaker,?state,?tentativeAcceptSemantics,?acceptSemantics,?semanticType)]}
{name: failed, 
roles:[isDiarcAgent(?actor,?agentRef)]}
{name: failed, 
roles:[getPromptText(?actor)]}
{name: failed, 
roles:[believeFact(?actor,?speaker,?addressee,?fact,?semanticType,?responseSemantics)]}
{name: failed, 
roles:[getCameraData(?actor,?jobName)]}
{name: succeeded, 
roles:[putAwayGripper(?actor,?gripperType)]}
{name: succeeded, 
roles:[assertProperties(?actor,?ref,?properties)]}
{name: failed, 
roles:[conveyorForward(?actor)]}
{name: succeeded, 
roles:[bindToSurface(?actor,?goal,?surfaceHeight)]}
{name: failed, 
roles:[retractBeliefs(?actor,?beliefs,?memoryLevel)]}
{name: failed, 
roles:[getCurrentGoals(?actor)]}
{name: succeeded, 
roles:[runScrewdriverProgram(?actor,?programID)]}
{name: succeeded, 
roles:[addDetectionType(?actor,?descriptor,?jobName)]}
{name: failed, 
roles:[getCognexJobForDescriptor(?actor,?descriptor)]}
{name: failed, 
roles:[sayText(?actor,?text)]}
{name: failed, 
roles:[chatCompletion(?actor,?prompt)]}
{name: failed, 
roles:[acceptEE(?actor)]}
{name: knows, 
roles:[?actor,durationOf(?goalPred,?temporal,!duration)]}
{name: succeeded, 
roles:[queryCount(?actor,?query)]}

Properties:
{name: this, 
roles:[X:physobj]}
{name: hole, 
roles:[X:physobj]}
{name: m3, 
roles:[X:physobj]}
{name: deepM3, 
roles:[X:physobj]}
{name: left, 
roles:[X:physobj]}
{name: right, 
roles:[X:physobj]}
{name: top, 
roles:[X:physobj]}
{name: bottom, 
roles:[X:physobj]}
{name: prop, 
roles:[X:physobj]}
{name: bottle, 
roles:[X:physobj]}
{name: nfsv, 
roles:[X:physobj]}
{name: nvfau, 
roles:[X:physobj]}
{name: it, 
roles:[X:physobj]}
{name: that, 
roles:[X:physobj]}
{name: thing, 
roles:[X:physobj]}
{name: those, 
roles:[X:physobj]}
{name: they, 
roles:[X:physobj]}
{name: these, 
roles:[X:physobj]}
{name: this, 
roles:[X:context]}
{name: it, 
roles:[X:context]}
{name: that, 
roles:[X:context]}
{name: thing, 
roles:[X:context]}
{name: those, 
roles:[X:context]}
{name: they, 
roles:[X:context]}
{name: these, 
roles:[X:context]}
{name: this, 
roles:[X:pose]}
{name: conveyor, 
roles:[X:pose]}
{name: work area, 
roles:[X:pose]}
{name: screw feeder, 
roles:[X:pose]}
{name: it, 
roles:[X:pose]}
{name: that, 
roles:[X:pose]}
{name: thing, 
roles:[X:pose]}
{name: those, 
roles:[X:pose]}
{name: they, 
roles:[X:pose]}
{name: these, 
roles:[X:pose]}
{name: doit, 
roles:[X:dialog]}
{name: dothis, 
roles:[Xdialog:dialog]}
{name: dothat, 
roles:[Xdialog:dialog]}
{name: that, 
roles:[Xdialog:dialog]}


Facts from Belief:
{name: trust, 
roles:[temi,brad]}
{name: is_superior, 
roles:[chris,shafer]}
{name: role, 
roles:[tyler,supervisor(temi)]}
{name: have, 
roles:[zno,exists(X,name(X))]}
{name: name, 
roles:[dempster,dempster]}
{name: trust, 
roles:[armone,brad]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(job(nvDet)),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,mod(none))]}
{name: isAdminGoal, 
roles:[updateActionLearning(D,X,S)]}
{name: succeeded, 
roles:[configureScrewdriverProgram(self,m3,150,300,6500)]}
{name: role, 
roles:[tyler,supervisor(robottwo)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751813516,1000)]}
{name: succeeded, 
roles:[assertBelief(self,objectDefinition(deepM3,0.045,0.07))]}
{name: succeeded, 
roles:[askQuestion(self,self,"what are the differences",mod(X))]}
{name: succeeded, 
roles:[handleWant(self,brad,self,mountScrew(self,screw),direct)]}
{name: is_superior, 
roles:[evan,fetch]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,gotoCamerapose(self,pose_1))),suppSemantics(semantics("work area(pose_1)")),direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(val(300,mNm)),suppSemantics,direct]}
{name: is_superior, 
roles:[searcher,dempster]}
{name: role, 
roles:[tyler,supervisor(zno)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,screwIn(self,m3,physobj_2),direct)]}
{name: subtype, 
roles:[container,physobj]}
{name: is_superior, 
roles:[ravenna,robotone]}
{name: name, 
roles:[shafer,shafer]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,val(150,mNm))]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2)))),suppSemantics,direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,defineScrewType(self,m3))),suppSemantics,direct]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,observeDescriptor(self,m3,2)))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751802344)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,job(cbDet))]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,gotoCamerapose(self,pose_0))),suppSemantics(semantics(conveyor(pose_0))),direct]}
{name: object, 
roles:[gripper,eetype]}
{name: have, 
roles:[zno_two,exists(X,name(X))]}
{name: succeeded, 
roles:[submitGoal(self,moveConveyorForward(self))]}
{name: is_superior, 
roles:[eric,dempster]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2))))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(mod(none)),indirectSemantics,suppSemantics)]}
{name: handled, 
roles:[self,self,want(brad,endLearningAssembleScript(self,physobj_1)),direct]}
{name: succeeded, 
roles:[getDescriptorForID(self,physobj_4)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751843995,1000)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751843995)]}
{name: is_superior, 
roles:[ravenna,armone]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751835206,1000)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start))),suppSemantics(semantics(hole(physobj_0))),direct)]}
{name: succeeded, 
roles:[assertBelief(self,objectDefinition(nvfau,0.045,0.07))]}
{name: is_superior, 
roles:[tyler,shafer]}
{name: role, 
roles:[chris,supervisor(armone)]}
{name: bel, 
roles:[self:agent,trusted(brad)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_0))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1)),semantics(conveyor(pose_0))))]}
{name: succeeded, 
roles:[achieveState(self,brad,screwIn(self,m3,physobj_2),ack(okay),ack(okay),direct)]}
{name: screwDescent, 
roles:[m3,-0.238]}
{name: role, 
roles:[user,supervisor(zno)]}
{name: role, 
roles:[brad,supervisor(dempster)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_3))),indirectSemantics,suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3))))]}
{name: succeeded, 
roles:[recordPose(self,conveyor,40)]}
{name: role, 
roles:[evan,supervisor(self:agent)]}
{name: role, 
roles:[brad,admin(fetch)]}
{name: role, 
roles:[user,supervisor(robottwo)]}
{name: handled, 
roles:[self,self,want(brad,defineItem(self,nfsv)),direct]}
{name: objectDefinition, 
roles:[m3,0.075,0.09]}
{name: succeeded, 
roles:[submitGoal(self,endLearningAssembleScript(self,physobj_1))]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,mountScrew(self,screw))),suppSemantics,direct)]}
{name: succeeded, 
roles:[updateActionLearning(self,assemblenfsv(self,physobj_1),end)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(job(cbDet)),suppSemantics,direct)]}
{name: role, 
roles:[chris,supervisor(robotone)]}
{name: role, 
roles:[brad,supervisor(self:agent)]}
{name: role, 
roles:[marlow,supervisor(andy)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: role, 
roles:[user,supervisor(armtwo)]}
{name: is_superior, 
roles:[searcher,andy]}
{name: succeeded, 
roles:[handleWant(self,brad,self,gotoCamerapose(self,pose_1),direct)]}
{name: bel, 
roles:[self:agent,trusted(evan)]}
{name: role, 
roles:[searcher,supervisor(zno_two)]}
{name: role, 
roles:[medic,supervisor(andy)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_0))),indirectSemantics,suppSemantics(semantics(conveyor(pose_0))))]}
{name: trust, 
roles:[dempster,evan]}
{name: is_superior, 
roles:[eric,self:agent]}
{name: role, 
roles:[searcher,supervisor(fetch)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,setupPoses(self))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[submitGoal(self,defineItem(self,nvfau))]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,defineItem(self,nfsv)))]}
{name: is_superior, 
roles:[medic,fetch]}
{name: succeeded, 
roles:[sayText(self,"okay are there any more differences")]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751850101,1000)]}
{name: bel, 
roles:[andy,trusted(brad)]}
{name: handled, 
roles:[self,self,want(brad,mountScrew(self,screw)),direct]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751835206)]}
{name: handled, 
roles:[self,self,want(brad,screwIn(self,m3,physobj_2)),direct]}
{name: role, 
roles:[tyler,supervisor(armtwo)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1)),semantics("work area(pose_1)")))]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,alignWith(self,physobj_0))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: succeeded, 
roles:[assertBelief(self,foundAt(m3,pose_2))]}
{name: is_superior, 
roles:[marlow,zno_two]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,observeDescriptor(self,m3,2))),suppSemantics,direct]}
{name: succeeded, 
roles:[handleWant(self,brad,self,defineItem(self,nfsv),direct)]}
{name: succeeded, 
roles:[addDetectionType(self,nvfau,nvDet)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(pose(pose_2)),indirectSemantics,suppSemantics(semantics("screw feeder(pose_2)")))]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,moveConveyorForward(self)))]}
{name: succeeded, 
roles:[handleWant(self,brad,self,endLearningAssembleScript(self,physobj_1),direct)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_2))),indirectSemantics,suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2))))]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end)))]}
{name: role, 
roles:[medic,supervisor(zno)]}
{name: is_superior, 
roles:[ravenna,robottwo]}
{name: bel, 
roles:[zno_two,trusted(brad)]}
{name: role, 
roles:[ravenna,supervisor(dempster)]}
{name: role, 
roles:[searcher,supervisor(robotone)]}
{name: role, 
roles:[tyler,supervisor(zno_two)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end))),suppSemantics(semantics(hole(physobj_0))),direct]}
{name: admin_of, 
roles:[brad,shafer]}
{name: succeeded, 
roles:[achieveState(self,brad,mountScrew(self,screw),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,defineItem(self,nvfau))),suppSemantics,direct]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,endLearningAssembleScript(self,physobj_1)))]}
{name: subtype, 
roles:[modelID,physobj]}
{name: succeeded, 
roles:[generateResponse(self,brad,ack(okay),"[]",direct)]}
{name: diarcAgent, 
roles:[zno]}
{name: succeeded, 
roles:[handleWant(self,brad,self,getOn(self,physobj_1,pose_1),direct)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751818994)]}
{name: succeeded, 
roles:[achieveState(self,brad,getOn(self,physobj_1,pose_1),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[defineItem(self,nvfau)]}
{name: is_superior, 
roles:[marlow,armone]}
{name: role, 
roles:[tyler,supervisor(robotone)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(mod(none)),suppSemantics,direct]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,setupPoses(self)))]}
{name: have, 
roles:[andy,exists(X,name(X))]}
{name: trust, 
roles:[dempster,brad]}
{name: role, 
roles:[marlow,supervisor(shafer)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_1))),indirectSemantics,suppSemantics(semantics("work area(pose_1)")))]}
{name: role, 
roles:[chris,supervisor(armtwo)]}
{name: actor, 
roles:[chris]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751803929,1000)]}
{name: name, 
roles:[armtwo,armtwo]}
{name: diarcAgent, 
roles:[armtwo]}
{name: name, 
roles:[robotone,robotone]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(val(150,mNm)),suppSemantics,direct)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(val(6500,deg)),suppSemantics,direct)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,alignWith(self,physobj_0)))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,defineScrewType(self,m3))),indirectSemantics,suppSemantics)]}
{name: currenteetype, 
roles:[self,gripper]}
{name: have, 
roles:[shafer,exists(X,name(X))]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end))),suppSemantics(semantics(hole(physobj_0))),direct)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,moveConveyorForward(self))),suppSemantics,direct]}
{name: subtype, 
roles:[arm,agent]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,observeDescriptor(self,m3,2))),suppSemantics,direct)]}
{name: role, 
roles:[chris,supervisor(zno)]}
{name: diarcAgent, 
roles:[armone]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,startLearningAssembleScript(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct)]}
{name: role, 
roles:[brad,supervisor(temi)]}
{name: is_superior, 
roles:[eric,robottwo]}
{name: bel, 
roles:[andy,trusted(evan)]}
{name: succeeded, 
roles:[submitTTSRequest(self,self,self,okay)]}
{name: handled, 
roles:[self,self,want(brad,defineItem(self,nvfau)),direct]}
{name: handled, 
roles:[self,self,want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end)),direct]}
{name: succeeded, 
roles:[sayText(self,"what is its target torque in millinewton meters")]}
{name: name, 
roles:[temi,temi]}
{name: role, 
roles:[brad,supervisor(andy)]}
{name: succeeded, 
roles:[submitGoal(self,defineItem(self,nfsv))]}
{name: is_superior, 
roles:[searcher,self:agent]}
{name: role, 
roles:[chris,supervisor(temi)]}
{name: bel, 
roles:[robottwo,trusted(brad)]}
{name: succeeded, 
roles:[submitNLGRequest(self,self,brad,ack(okay),"[]")]}
{name: is_superior, 
roles:[marlow,armtwo]}
{name: is_superior, 
roles:[brad,zno_two]}
{name: admin_of, 
roles:[brad,fetch]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,runScrewdriverJob(self,screw))),indirectSemantics,suppSemantics)]}
{name: handled, 
roles:[self,self,want(brad,gotoCamerapose(self,pose_1)),direct]}
{name: handled, 
roles:[self,self,want(brad,defineScrewType(self,m3)),direct]}
{name: succeeded, 
roles:[submitGoal(self,updateActionLearning(self,screwIn(self,screw,physobj_0),end))]}
{name: object, 
roles:[screwdriver,eetype]}
{name: role, 
roles:[user,supervisor(armone)]}
{name: role, 
roles:[chris,supervisor(zno_two)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751845395,1000)]}
{name: role, 
roles:[medic,supervisor(armtwo)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(val(300,mNm)),indirectSemantics,suppSemantics)]}
{name: subtype, 
roles:[place,location]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,mod(none))]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3)))),indirectSemantics,suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3)),semantics(deepM3(physobj_6)),semantics(top(physobj_6))))]}
{name: succeeded, 
roles:[assertBelief(self,object(physobj_1,physobj))]}
{name: bel, 
roles:[armtwo,trusted(brad)]}
{name: is_superior, 
roles:[brad,fetch]}
{name: succeeded, 
roles:[achieveState(self,brad,screwIn(self,m3,physobj_3),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[tyler,fetch]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751817406,1000)]}
{name: trust, 
roles:[armone,evan]}
{name: role, 
roles:[evan,supervisor(robottwo)]}
{name: role, 
roles:[evan,supervisor(dempster)]}
{name: succeeded, 
roles:[submitGoal(self,alignWith(self,physobj_0))]}
{name: role, 
roles:[brad,admin(zno_two)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751836398)]}
{name: handled, 
roles:[self,self,want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start)),direct]}
{name: is_superior, 
roles:[medic,robotone]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,defineScrewType(self,m3)))]}
{name: is_superior, 
roles:[tyler,dempster]}
{name: role, 
roles:[evan,supervisor(armone)]}
{name: succeeded, 
roles:[submitGoal(self,getOn(self,physobj_1,pose_1))]}
{name: role, 
roles:[searcher,supervisor(zno)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(val(150,mNm)),suppSemantics,direct]}
{name: succeeded, 
roles:[submitGoal(self,setupPoses(self))]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)))),suppSemantics(semantics(nvfau(physobj_4)),semantics(nfsv(physobj_1))),direct)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,screwIn(self,m3,physobj_3)))]}
{name: is_superior, 
roles:[brad,armone]}
{name: is_superior, 
roles:[user,zno_two]}
{name: is_superior, 
roles:[searcher,robottwo]}
{name: role, 
roles:[tyler,supervisor(self:agent)]}
{name: role, 
roles:[evan,supervisor(robotone)]}
{name: is_superior, 
roles:[eric,shafer]}
{name: role, 
roles:[tyler,supervisor(andy)]}
{name: have, 
roles:[dempster,exists(X,name(X))]}
{name: is_superior, 
roles:[chris,andy]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751817406)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,screwIn(self,m3,physobj_2)))]}
{name: admin_of, 
roles:[brad,zno_two]}
{name: succeeded, 
roles:[achieveState(self,brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start),ack(okay),ack(okay),direct)]}
{name: bel, 
roles:[zno_two,trusted(evan)]}
{name: role, 
roles:[brad,supervisor(robotone)]}
{name: succeeded, 
roles:[generateResponse(self,brad,ack(okay),direct)]}
{name: trust, 
roles:[zno,evan]}
{name: is_superior, 
roles:[searcher,temi]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,endLearningAssembleScript(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: succeeded, 
roles:[modifyAction(self,assemblenvfau(self,physobj_4),replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2)),none)]}
{name: cameraHeight, 
roles:[230]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,mountScrew(self,screw))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751834193)]}
{name: bel, 
roles:[fetch,trusted(evan)]}
{name: role, 
roles:[searcher,supervisor(armtwo)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,screwIn(self,m3,physobj_3))),suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3))),direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start))),suppSemantics(semantics(hole(physobj_0))),direct]}
{name: trust, 
roles:[fetch,evan]}
{name: is_superior, 
roles:[chris,fetch]}
{name: succeeded, 
roles:[addDetectionType(self,deepM3,holeDetT)]}
{name: objectDefinition, 
roles:[deepM3,0.045,0.07]}
{name: succeeded, 
roles:[modifyAction(self,assemblenvfau(self,physobj_4),replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3)),none)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,startLearningAssembleScript(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: trust, 
roles:[zno_two,evan]}
{name: is_superior, 
roles:[eric,armone]}
{name: succeeded, 
roles:[achieveState(self,brad,perceiveEntity(self,physobj_1),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[brad,shafer]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_1))),suppSemantics(semantics("work area(pose_1)")),direct)]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,job(cbDet))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751802344,1000)]}
{name: is_superior, 
roles:[brad,zno]}
{name: name, 
roles:[zno_two,zno_two]}
{name: is_superior, 
roles:[medic,shafer]}
{name: have, 
roles:[self:agent,exists(X,name(X))]}
{name: handled, 
roles:[self,self,want(brad,perceiveEntity(self,physobj_0)),direct]}
{name: role, 
roles:[evan,admin(robotone)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751838599,1000)]}
{name: succeeded, 
roles:[achieveState(self,brad,defineScrewType(self,m3),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,alignWith(self,physobj_0))),suppSemantics(semantics(hole(physobj_0))),direct)]}
{name: handled, 
roles:[self,self,want(brad,observeDescriptor(self,m3,2)),direct]}
{name: openspace, 
roles:[inFrontOf(X)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751834193,1000)]}
{name: is_superior, 
roles:[eric,armtwo]}
{name: free, 
roles:[self]}
{name: explanationType, 
roles:[A,incomplete]}
{name: succeeded, 
roles:[achieveState(self,brad,observeDescriptor(self,m3,2),ack(okay),ack(okay),direct)]}
{name: admin_of, 
roles:[evan,robotone]}
{name: succeeded, 
roles:[submitGoal(self,screwIn(self,m3,physobj_3))]}
{name: is_superior, 
roles:[eric,robotone]}
{name: role, 
roles:[medic,supervisor(zno_two)]}
{name: role, 
roles:[searcher,supervisor(shafer)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_0))),indirectSemantics,suppSemantics(semantics(conveyor(pose_0))))]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,moveConveyorForward(self))),suppSemantics,direct)]}
{name: role, 
roles:[brad,supervisor(robottwo)]}
{name: is_superior, 
roles:[user,dempster]}
{name: is_superior, 
roles:[evan,temi]}
{name: succeeded, 
roles:[achieveState(self,brad,endLearningAssembleScript(self,physobj_1),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[submitGoal(self,mountScrew(self,screw))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751838599)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2)))),suppSemantics,direct)]}
{name: trust, 
roles:[robotone,brad]}
{name: role, 
roles:[chris,supervisor(self:agent)]}
{name: succeeded, 
roles:[askQuestion(self,self,"which Cognex job is used to detect it",job(X))]}
{name: bel, 
roles:[robotone,trusted(evan)]}
{name: is_superior, 
roles:[marlow,fetch]}
{name: role, 
roles:[medic,supervisor(armone)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751846694,1000)]}
{name: succeeded, 
roles:[sayText(self,"at which pose can I find m3 screws")]}
{name: have, 
roles:[armone,exists(X,name(X))]}
{name: is_superior, 
roles:[marlow,temi]}
{name: role, 
roles:[ravenna,supervisor(armtwo)]}
{name: role, 
roles:[medic,supervisor(temi)]}
{name: succeeded, 
roles:[sayText(self,"which Cognex job is used to detect it")]}
{name: is_superior, 
roles:[brad,armtwo]}
{name: admin_of, 
roles:[evan,armone]}
{name: role, 
roles:[evan,admin(self:agent)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,screwIn(self,m3,physobj_2))),suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2))),direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(job(cbDet)),suppSemantics,direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,perceiveEntity(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct]}
{name: succeeded, 
roles:[updateActionLearning(self,screwIn(self,screw,physobj_0),end)]}
{name: name, 
roles:[robottwo,robottwo]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(val(150,mNm)),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[updateActionLearning(self,screwIn(self,screw,physobj_0),start)]}
{name: role, 
roles:[evan,admin(shafer)]}
{name: succeeded, 
roles:[achieveState(self,brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end),ack(okay),ack(okay),direct)]}
{name: trust, 
roles:[zno_two,brad]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751841296)]}
{name: actor, 
roles:[medic]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,defineItem(self,nvfau))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,endLearningAssembleScript(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: succeeded, 
roles:[handleWant(self,brad,self,defineItem(self,nvfau),direct)]}
{name: actor, 
roles:[user]}
{name: role, 
roles:[ravenna,supervisor(self:agent)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751836398,1000)]}
{name: role, 
roles:[evan,supervisor(armtwo)]}
{name: diarcAgent, 
roles:[robottwo]}
{name: succeeded, 
roles:[askQuestion(self,self,"what is its target torque in millinewton meters",val(X,Y))]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,runScrewdriverJob(self,screw))),suppSemantics,direct]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,defineItem(self,nvfau)))]}
{name: succeeded, 
roles:[sayText(self,"what are the differences")]}
{name: role, 
roles:[medic,supervisor(dempster)]}
{name: is_superior, 
roles:[user,andy]}
{name: name, 
roles:[fetch,fetch]}
{name: actor, 
roles:[ravenna]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,pose(pose_2))]}
{name: bel, 
roles:[armone,trusted(evan)]}
{name: object, 
roles:[physobj_1,physobj]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,val(6500,deg))]}
{name: role, 
roles:[ravenna,supervisor(shafer)]}
{name: bel, 
roles:[robotone,trusted(brad)]}
{name: trust, 
roles:[fetch,brad]}
{name: is_superior, 
roles:[medic,robottwo]}
{name: succeeded, 
roles:[submitGoal(self,screwIn(self,m3,physobj_2))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,defineItem(self,nfsv))),indirectSemantics,suppSemantics)]}
{name: is_superior, 
roles:[evan,zno_two]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,getOn(self,physobj_1,pose_1)))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751839897,1000)]}
{name: role, 
roles:[ravenna,supervisor(zno)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,runScrewdriverJob(self,screw))),suppSemantics,direct)]}
{name: role, 
roles:[searcher,supervisor(armone)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,alignWith(self,physobj_0),direct)]}
{name: trust, 
roles:[shafer,evan]}
{name: role, 
roles:[marlow,supervisor(robotone)]}
{name: succeeded, 
roles:[achieveState(self,brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)),ack(okay),ack(okay),direct)]}
{name: trust, 
roles:[andy,evan]}
{name: is_superior, 
roles:[marlow,dempster]}
{name: succeeded, 
roles:[assertBelief(self,screwDescent(deepM3,-0.250))]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,getOn(self,physobj_1,pose_0)))]}
{name: role, 
roles:[user,supervisor(self:agent)]}
{name: is_superior, 
roles:[eric,zno]}
{name: actor, 
roles:[eric]}
{name: role, 
roles:[marlow,supervisor(robottwo)]}
{name: admin_of, 
roles:[evan,zno]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,defineItem(self,nfsv))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,mountScrew(self,screw)))]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2))))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,mountScrew(self,screw))),indirectSemantics,suppSemantics)]}
{name: diarcAgent, 
roles:[self]}
{name: succeeded, 
roles:[submitGoal(self,defineScrewType(self,m3))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_0))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: is_superior, 
roles:[tyler,armone]}
{name: role, 
roles:[evan,admin(zno)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,job(nvDet))]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_0))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: role, 
roles:[chris,supervisor(robottwo)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_0))),suppSemantics(semantics(conveyor(pose_0))),direct)]}
{name: is_superior, 
roles:[user,fetch]}
{name: role, 
roles:[marlow,supervisor(self:agent)]}
{name: admin_of, 
roles:[evan,armtwo]}
{name: succeeded, 
roles:[submitGoal(self,perceiveEntity(self,physobj_0))]}
{name: succeeded, 
roles:[submitGoal(self,observeDescriptor(self,m3,2))]}
{name: role, 
roles:[user,supervisor(robotone)]}
{name: actor, 
roles:[searcher]}
{name: succeeded, 
roles:[getDescriptorForID(self,physobj_1)]}
{name: role, 
roles:[evan,supervisor(zno)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751813516)]}
{name: is_superior, 
roles:[chris,dempster]}
{name: is_superior, 
roles:[ravenna,zno_two]}
{name: is_superior, 
roles:[user,temi]}
{name: role, 
roles:[eric,supervisor(zno_two)]}
{name: diarcAgent, 
roles:[robotone]}
{name: is_superior, 
roles:[ravenna,fetch]}
{name: succeeded, 
roles:[achieveState(self,brad,perceiveEntity(self,physobj_0),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[ravenna,temi]}
{name: role, 
roles:[eric,supervisor(andy)]}
{name: handled, 
roles:[self,self,want(brad,startLearningAssembleScript(self,physobj_1)),direct]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(job(nvDet)),suppSemantics,direct)]}
{name: succeeded, 
roles:[achieveState(self,brad,startLearningAssembleScript(self,physobj_1),ack(okay),ack(okay),direct)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,startLearningAssembleScript(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: succeeded, 
roles:[assertBelief(self,at(self,pose_0))]}
{name: role, 
roles:[eric,supervisor(fetch)]}
{name: admin_of, 
roles:[evan,shafer]}
{name: is_superior, 
roles:[medic,self:agent]}
{name: role, 
roles:[evan,supervisor(shafer)]}
{name: role, 
roles:[eric,supervisor(temi)]}
{name: succeeded, 
roles:[submitGoal(self,getOn(self,physobj_1,pose_0))]}
{name: is_superior, 
roles:[ravenna,andy]}
{name: succeeded, 
roles:[askQuestion(self,self,"what is its max torque in millinewton meters",val(X,Y))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751846694)]}
{name: succeeded, 
roles:[askQuestion(self,self,"okay are there any more differences",mod(X))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,defineItem(self,nvfau))),indirectSemantics,suppSemantics)]}
{name: role, 
roles:[evan,supervisor(fetch)]}
{name: subtype, 
roles:[agent,physical]}
{name: succeeded, 
roles:[defineScrewType(self,m3)]}
{name: is_superior, 
roles:[tyler,robottwo]}
{name: succeeded, 
roles:[achieveState(self,brad,setupPoses(self),ack(okay),ack(okay),direct)]}
{name: have, 
roles:[robotone,exists(X,name(X))]}
{name: handled, 
roles:[self,self,want(brad,gotoCamerapose(self,pose_0)),direct]}
{name: name, 
roles:[zno,zno]}
{name: bel, 
roles:[temi,trusted(brad)]}
{name: handled, 
roles:[self,self,want(brad,runScrewdriverJob(self,screw)),direct]}
{name: isAdminGoal, 
roles:[modifyAction(D,X,S,A)]}
{name: role, 
roles:[searcher,supervisor(dempster)]}
{name: bel, 
roles:[armone,trusted(brad)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,startLearningAssembleScript(self,physobj_1),direct)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(val(300,mNm)),indirectSemantics,suppSemantics)]}
{name: role, 
roles:[chris,supervisor(shafer)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751822296,1000)]}
{name: handled, 
roles:[self,self,want(brad,moveConveyorForward(self)),direct]}
{name: succeeded, 
roles:[submitGoal(self,gotoCamerapose(self,pose_0))]}
{name: succeeded, 
roles:[goToPose(self,"MelfaPose{approachOffset=170.0, surfaceHeight=0.0, x=50.0, y=-515.0, z=300.0, a=3.14159, b=0.0, c=3.14159, l1=0.0, l2=0.0, s1=7, s2=0}")]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2)))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_2))),suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2))),direct)]}
{name: name, 
roles:[self,shafer]}
{name: handled, 
roles:[self,self,want(brad,screwIn(self,m3,physobj_3)),direct]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(job(nvDet)),suppSemantics,direct]}
{name: role, 
roles:[brad,supervisor(fetch)]}
{name: handled, 
roles:[self,self,want(brad,getOn(self,physobj_1,pose_0)),direct]}
{name: is_superior, 
roles:[chris,temi]}
{name: is_superior, 
roles:[chris,armone]}
{name: role, 
roles:[ravenna,supervisor(robotone)]}
{name: role, 
roles:[tyler,supervisor(shafer)]}
{name: succeeded, 
roles:[submitGoal(self,gotoCamerapose(self,pose_1))]}
{name: trust, 
roles:[self:agent,brad]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751826525,1000)]}
{name: succeeded, 
roles:[submitGoal(self,startLearningAssembleScript(self,physobj_1))]}
{name: subtype, 
roles:[var,object]}
{name: succeeded, 
roles:[submitGoal(self,perceiveEntity(self,physobj_1))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751831296)]}
{name: is_superior, 
roles:[evan,self:agent]}
{name: succeeded, 
roles:[submitGoal(self,runScrewdriverJob(self,screw))]}
{name: is_superior, 
roles:[tyler,zno]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,setupPoses(self))),suppSemantics,direct]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3))))]}
{name: is_superior, 
roles:[chris,robotone]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2))))]}
{name: role, 
roles:[eric,supervisor(dempster)]}
{name: succeeded, 
roles:[goToPose(self,"MelfaPose{approachOffset=170.0, surfaceHeight=0.0, x=650.0, y=0.0, z=300.0, a=3.14159, b=0.0, c=3.14159, l1=0.0, l2=0.0, s1=7, s2=0}")]}
{name: admin_of, 
roles:[brad,zno]}
{name: succeeded, 
roles:[handleWant(self,brad,self,gotoCamerapose(self,pose_0),direct)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1)),semantics("work area(pose_1)")))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,setupPoses(self))),indirectSemantics,suppSemantics)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)))),suppSemantics(semantics(nvfau(physobj_4)),semantics(nfsv(physobj_1))),direct]}
{name: is_superior, 
roles:[brad,dempster]}
{name: role, 
roles:[brad,admin(armtwo)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751831296,1000)]}
{name: is_superior, 
roles:[evan,andy]}
{name: role, 
roles:[evan,admin(armtwo)]}
{name: trust, 
roles:[robottwo,evan]}
{name: succeeded, 
roles:[handleWant(self,brad,self,runScrewdriverJob(self,screw),direct)]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2))))]}
{name: subtype, 
roles:[physical,var]}
{name: is_superior, 
roles:[searcher,zno_two]}
{name: is_superior, 
roles:[user,zno]}
{name: is_superior, 
roles:[user,robottwo]}
{name: screwDescent, 
roles:[deepM3,-0.250]}
{name: admin_of, 
roles:[brad,robottwo]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(pose(pose_2)),suppSemantics(semantics("screw feeder(pose_2)")),direct]}
{name: handled, 
roles:[self,self,want(brad,alignWith(self,physobj_0)),direct]}
{name: have, 
roles:[fetch,exists(X,name(X))]}
{name: subtype, 
roles:[eetype,concept]}
{name: diarcAgent, 
roles:[fetch]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: bel, 
roles:[fetch,trusted(brad)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751850101)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(job(nvDet)),indirectSemantics,suppSemantics)]}
{name: role, 
roles:[medic,supervisor(fetch)]}
{name: role, 
roles:[marlow,supervisor(zno_two)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,perceiveEntity(self,physobj_0)))]}
{name: role, 
roles:[brad,admin(robottwo)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_1))),suppSemantics(semantics(nfsv(physobj_1)),semantics("work area(pose_1)")),direct)]}
{name: role, 
roles:[brad,admin(zno)]}
{name: role, 
roles:[searcher,supervisor(andy)]}
{name: isAdminGoal, 
roles:[modifyAction(_102360,_102361,_102362,_102363)]}
{name: is_superior, 
roles:[brad,self:agent]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct)]}
{name: role, 
roles:[eric,supervisor(self:agent)]}
{name: isAdminGoal, 
roles:[updateActionLearning(_102351,_102352,_102353)]}
{name: role, 
roles:[user,supervisor(shafer)]}
{name: is_superior, 
roles:[tyler,armtwo]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,startLearningAssembleScript(self,physobj_1)))]}
{name: is_superior, 
roles:[medic,andy]}
{name: admin_of, 
roles:[brad,armtwo]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(mod(none)),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,perceiveEntity(self,physobj_1)))]}
{name: succeeded, 
roles:[setupPoses(self)]}
{name: is_superior, 
roles:[user,armtwo]}
{name: succeeded, 
roles:[achieveState(self,brad,alignWith(self,physobj_0),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,endLearningAssembleScript(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct)]}
{name: is_superior, 
roles:[marlow,andy]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2)))),suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2)),semantics(deepM3(physobj_5)),semantics(bottom(physobj_5))),direct]}
{name: name, 
roles:[andy,andy]}
{name: succeeded, 
roles:[achieveState(self,brad,gotoCamerapose(self,pose_1),ack(okay),ack(okay),direct)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,startLearningAssembleScript(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct]}
{name: is_superior, 
roles:[medic,armtwo]}
{name: bel, 
roles:[temi,trusted(evan)]}
{name: role, 
roles:[ravenna,supervisor(robottwo)]}
{name: role, 
roles:[brad,admin(andy)]}
{name: succeeded, 
roles:[askQuestion(self,self,"what is its max angle in degrees",val(X,Y))]}
{name: succeeded, 
roles:[addDetectionType(self,m3,holeDet)]}
{name: is_superior, 
roles:[marlow,shafer]}
{name: role, 
roles:[brad,admin(self:agent)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,defineItem(self,nfsv))),suppSemantics,direct)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,runScrewdriverJob(self,screw)))]}
{name: role, 
roles:[marlow,supervisor(armone)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,alignWith(self,physobj_0))),suppSemantics(semantics(hole(physobj_0))),direct]}
{name: bel, 
roles:[shafer,trusted(evan)]}
{name: is_superior, 
roles:[chris,zno_two]}
{name: diarcAgent, 
roles:[shafer]}
{name: at, 
roles:[self,pose_0]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(val(6500,deg)),suppSemantics,direct]}
{name: succeeded, 
roles:[submitGoal(self,updateActionLearning(self,screwIn(self,screw,physobj_0),start))]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2)))),suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2)),semantics(deepM3(physobj_5)),semantics(bottom(physobj_5))),direct)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(val(150,mNm)),indirectSemantics,suppSemantics)]}
{name: admin_of, 
roles:[brad,andy]}
{name: role, 
roles:[evan,admin(dempster)]}
{name: admin_of, 
roles:[brad,self:agent]}
{name: trust, 
roles:[zno,brad]}
{name: admin_of, 
roles:[evan,self:agent]}
{name: is_superior, 
roles:[searcher,fetch]}
{name: succeeded, 
roles:[handleWant(self,brad,self,moveConveyorForward(self),direct)]}
{name: succeeded, 
roles:[startLearningAssembleScript(self,physobj_1)]}
{name: succeeded, 
roles:[askQuestion(self,self,"at which pose can I find m3 screws",pose(X))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751842695,1000)]}
{name: is_superior, 
roles:[tyler,robotone]}
{name: role, 
roles:[brad,admin(temi)]}
{name: is_superior, 
roles:[medic,zno]}
{name: is_superior, 
roles:[ravenna,dempster]}
{name: role, 
roles:[evan,admin(armone)]}
{name: succeeded, 
roles:[sayText(self,"what is its max torque in millinewton meters")]}
{name: role, 
roles:[eric,supervisor(robottwo)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,getOn(self,physobj_1,pose_0),direct)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,gotoCamerapose(self,pose_1))),indirectSemantics,suppSemantics(semantics("work area(pose_1)")))]}
{name: is_superior, 
roles:[evan,dempster]}
{name: succeeded, 
roles:[handleWant(self,brad,self,updateActionLearning(self,screwIn(self,screw,physobj_0),start),direct)]}
{name: succeeded, 
roles:[assertBelief(self,screwDescent(m3,-0.238))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_0))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1)),semantics(conveyor(pose_0))))]}
{name: succeeded, 
roles:[achieveState(self,brad,gotoCamerapose(self,pose_0),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,job(nvDet))]}
{name: admin_of, 
roles:[evan,robottwo]}
{name: is_superior, 
roles:[chris,armtwo]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,defineItem(self,nfsv))),suppSemantics,direct]}
{name: admin_of, 
roles:[brad,robotone]}
{name: subtype, 
roles:[concept,var]}
{name: role, 
roles:[marlow,supervisor(zno)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,getOn(self,physobj_1,pose_0))),suppSemantics(semantics(nfsv(physobj_1)),semantics(conveyor(pose_0))),direct)]}
{name: subtype, 
roles:[pose,location]}
{name: role, 
roles:[medic,supervisor(shafer)]}
{name: is_superior, 
roles:[chris,zno]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(val(6500,deg)),indirectSemantics,suppSemantics)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),end))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3)))),indirectSemantics,suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3)),semantics(deepM3(physobj_6)),semantics(top(physobj_6))))]}
{name: isAdminGoal, 
roles:[modifyAction(_102327,_102328,_102329,_102330)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,updateActionLearning(self,screwIn(self,screw,physobj_0),start)))]}
{name: succeeded, 
roles:[achieveState(self,brad,defineItem(self,nfsv),ack(okay),ack(okay),direct)]}
{name: role, 
roles:[brad,supervisor(zno_two)]}
{name: trust, 
roles:[andy,brad]}
{name: succeeded, 
roles:[achieveState(self,brad,defineItem(self,nvfau),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[evan,robottwo]}
{name: role, 
roles:[ravenna,supervisor(armone)]}
{name: role, 
roles:[tyler,supervisor(fetch)]}
{name: role, 
roles:[evan,admin(robottwo)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,setupPoses(self))),suppSemantics,direct)]}
{name: is_superior, 
roles:[tyler,zno_two]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,pose(pose_2))]}
{name: trust, 
roles:[robotone,evan]}
{name: succeeded, 
roles:[handleWant(self,brad,self,perceiveEntity(self,physobj_1),direct)]}
{name: role, 
roles:[marlow,supervisor(armtwo)]}
{name: trust, 
roles:[self:agent,evan]}
{name: admin_of, 
roles:[brad,temi]}
{name: role, 
roles:[searcher,supervisor(self:agent)]}
{name: role, 
roles:[chris,supervisor(fetch)]}
{name: have, 
roles:[temi,exists(X,name(X))]}
{name: bel, 
roles:[dempster,trusted(evan)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,defineScrewType(self,m3))),indirectSemantics,suppSemantics)]}
{name: is_superior, 
roles:[user,armone]}
{name: role, 
roles:[chris,supervisor(andy)]}
{name: is_superior, 
roles:[tyler,andy]}
{name: is_superior, 
roles:[brad,andy]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751842695)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_3))),suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3))),direct)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,gotoCamerapose(self,pose_0)))]}
{name: succeeded, 
roles:[achieveState(self,brad,moveConveyorForward(self),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[brad,temi]}
{name: is_superior, 
roles:[tyler,temi]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,val(6500,deg))]}
{name: role, 
roles:[brad,admin(robotone)]}
{name: succeeded, 
roles:[sayText(self,"okay")]}
{name: trust, 
roles:[shafer,brad]}
{name: is_superior, 
roles:[searcher,robotone]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751818994,1000)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,gotoCamerapose(self,pose_1)))]}
{name: admin_of, 
roles:[evan,dempster]}
{name: handled, 
roles:[self,self,want(brad,setupPoses(self)),direct]}
{name: role, 
roles:[brad,supervisor(armone)]}
{name: role, 
roles:[searcher,supervisor(robottwo)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,perceiveEntity(self,physobj_0),direct)]}
{name: succeeded, 
roles:[init(self)]}
{name: succeeded, 
roles:[addDetectionType(self,nfsv,cbDet)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(job(cbDet)),indirectSemantics,suppSemantics)]}
{name: role, 
roles:[evan,admin(zno_two)]}
{name: is_superior, 
roles:[searcher,zno]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: succeeded, 
roles:[handleWant(self,brad,self,observeDescriptor(self,m3,2),direct)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,getOn(self,physobj_1,pose_0))),suppSemantics(semantics(nfsv(physobj_1)),semantics(conveyor(pose_0))),direct]}
{name: trust, 
roles:[armtwo,brad]}
{name: is_superior, 
roles:[chris,self:agent]}
{name: role, 
roles:[eric,supervisor(armone)]}
{name: role, 
roles:[searcher,supervisor(temi)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751841296,1000)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)))),indirectSemantics,suppSemantics(semantics(nvfau(physobj_4)),semantics(nfsv(physobj_1))))]}
{name: diarcAgent, 
roles:[zno_two]}
{name: role, 
roles:[tyler,supervisor(dempster)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,endLearningAssembleScript(self,physobj_1))),suppSemantics(semantics(nfsv(physobj_1))),direct]}
{name: succeeded, 
roles:[defineItem(self,nfsv)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(mod(none)),suppSemantics,direct)]}
{name: role, 
roles:[brad,supervisor(shafer)]}
{name: bel, 
roles:[zno,trusted(evan)]}
{name: role, 
roles:[user,supervisor(zno_two)]}
{name: actor, 
roles:[tyler]}
{name: role, 
roles:[eric,supervisor(robotone)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_2))),indirectSemantics,suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2))))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751821096,1000)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,getOn(self,physobj_1,pose_1))),suppSemantics(semantics(nfsv(physobj_1)),semantics("work area(pose_1)")),direct]}
{name: is_superior, 
roles:[evan,robotone]}
{name: subtype, 
roles:[method,concept]}
{name: is_superior, 
roles:[medic,armone]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,alignWith(self,physobj_0))),indirectSemantics,suppSemantics(semantics(hole(physobj_0))))]}
{name: is_superior, 
roles:[brad,robotone]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751839897)]}
{name: succeeded, 
roles:[modifyAction(self,like(assemblenvfau(self,physobj_4),assemblenfsv(self,physobj_1)),replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2)),none)]}
{name: role, 
roles:[medic,supervisor(robotone)]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3))))]}
{name: is_superior, 
roles:[searcher,armtwo]}
{name: role, 
roles:[eric,supervisor(shafer)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,runScrewdriverJob(self,screw))),indirectSemantics,suppSemantics)]}
{name: admin_of, 
roles:[evan,zno_two]}
{name: succeeded, 
roles:[openGripper(self)]}
{name: is_superior, 
roles:[brad,robottwo]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(val(300,mNm)),suppSemantics,direct)]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,val(300,mNm))]}
{name: is_superior, 
roles:[marlow,zno]}
{name: is_superior, 
roles:[searcher,shafer]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751815615,1000)]}
{name: objectDefinition, 
roles:[nvfau,0.045,0.07]}
{name: subtype, 
roles:[physobj,physical]}
{name: handled, 
roles:[self,self,want(brad,perceiveEntity(self,physobj_1)),direct]}
{name: succeeded, 
roles:[sayText(self,"what is its max angle in degrees")]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_1))),indirectSemantics,suppSemantics(semantics(nfsv(physobj_1))))]}
{name: objectDefinition, 
roles:[nfsv,0.075,0.09]}
{name: role, 
roles:[brad,supervisor(zno)]}
{name: admin_of, 
roles:[brad,dempster]}
{name: role, 
roles:[eric,supervisor(armtwo)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,screwIn(self,m3,physobj_3))),indirectSemantics,suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3))))]}
{name: subtype, 
roles:[location,concept]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,val(300,mNm))]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(val(6500,deg)),indirectSemantics,suppSemantics)]}
{name: is_superior, 
roles:[medic,temi]}
{name: succeeded, 
roles:[achieveState(self,brad,getOn(self,physobj_1,pose_0),ack(okay),ack(okay),direct)]}
{name: is_superior, 
roles:[tyler,self:agent]}
{name: bel, 
roles:[shafer,trusted(brad)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)),direct)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)))),indirectSemantics,suppSemantics(semantics(nvfau(physobj_4)),semantics(nfsv(physobj_1))))]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3)))),suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3)),semantics(deepM3(physobj_6)),semantics(top(physobj_6))),direct]}
{name: role, 
roles:[brad,admin(dempster)]}
{name: role, 
roles:[marlow,supervisor(fetch)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(pose(pose_2)),indirectSemantics,suppSemantics(semantics("screw feeder(pose_2)")))]}
{name: role, 
roles:[marlow,supervisor(temi)]}
{name: role, 
roles:[user,supervisor(dempster)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(pose(pose_2)),suppSemantics(semantics("screw feeder(pose_2)")),direct)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,defineItem(self,nvfau))),suppSemantics,direct)]}
{name: name, 
roles:[armone,armone]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,mountScrew(self,screw))),suppSemantics,direct]}
{name: is_superior, 
roles:[evan,armone]}
{name: is_superior, 
roles:[medic,zno_two]}
{name: role, 
roles:[brad,supervisor(armtwo)]}
{name: role, 
roles:[brad,admin(shafer)]}
{name: trust, 
roles:[temi,evan]}
{name: succeeded, 
roles:[isQuestionResponse(self,brad,self,want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1))))]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,observeDescriptor(self,m3,2))),indirectSemantics,suppSemantics)]}
{name: is_superior, 
roles:[ravenna,self:agent]}
{name: actor, 
roles:[brad]}
{name: succeeded, 
roles:[endLearningAssembleScript(self,physobj_1)]}
{name: is_superior, 
roles:[ravenna,zno]}
{name: is_superior, 
roles:[user,shafer]}
{name: diarcAgent, 
roles:[temi]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751803929)]}
{name: role, 
roles:[ravenna,supervisor(temi)]}
{name: diarcAgent, 
roles:[andy]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751853895,1000)]}
{name: succeeded, 
roles:[goToPose(self,"MelfaPose{approachOffset=170.0, surfaceHeight=0.0, x=-75.0, y=-610.0, z=300.0, a=3.14159, b=0.0, c=3.14159, l1=0.0, l2=0.0, s1=7, s2=0}")]}
{name: role, 
roles:[medic,supervisor(robottwo)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(mod(replace(observeDescriptor(self,deepM3,2),observeDescriptor(self,m3,2)))),indirectSemantics,suppSemantics)]}
{name: foundAt, 
roles:[m3,pose_2]}
{name: role, 
roles:[ravenna,supervisor(andy)]}
{name: is_superior, 
roles:[user,self:agent]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751826525)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,moveConveyorForward(self))),indirectSemantics,suppSemantics)]}
{name: have, 
roles:[armtwo,exists(X,name(X))]}
{name: diarcAgent, 
roles:[dempster]}
{name: role, 
roles:[evan,admin(temi)]}
{name: is_superior, 
roles:[ravenna,armtwo]}
{name: succeeded, 
roles:[updateActionLearning(self,assemblenfsv(self,physobj_1),start)]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(job(cbDet)),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,defineScrewType(self,m3))),suppSemantics,direct)]}
{name: is_superior, 
roles:[searcher,armone]}
{name: bel, 
roles:[dempster,trusted(brad)]}
{name: succeeded, 
roles:[submitGoal(self,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1)))]}
{name: role, 
roles:[user,supervisor(fetch)]}
{name: bel, 
roles:[armtwo,trusted(evan)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,defineScrewType(self,m3),direct)]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_6),screwIn(self,m3,physobj_3)))),suppSemantics(semantics(m3(physobj_3)),semantics(right(physobj_3)),semantics(deepM3(physobj_6)),semantics(top(physobj_6))),direct)]}
{name: isAdminGoal, 
roles:[updateActionLearning(_102318,_102319,_102320)]}
{name: trust, 
roles:[armtwo,evan]}
{name: succeeded, 
roles:[handleWant(self,brad,self,updateActionLearning(self,screwIn(self,screw,physobj_0),end),direct)]}
{name: role, 
roles:[user,supervisor(temi)]}
{name: actor, 
roles:[evan]}
{name: is_superior, 
roles:[ravenna,shafer]}
{name: succeeded, 
roles:[handleSemantics(self,brad,self,and(self),semantics(want(brad,perceiveEntity(self,physobj_0))),suppSemantics(semantics(hole(physobj_0))),direct)]}
{name: admin_of, 
roles:[evan,temi]}
{name: is_superior, 
roles:[marlow,robottwo]}
{name: succeeded, 
roles:[answerQuestion(self,brad,self,val(150,mNm))]}
{name: succeeded, 
roles:[achieveState(self,brad,runScrewdriverJob(self,screw),ack(okay),ack(okay),direct)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751845395)]}
{name: admin_of, 
roles:[evan,fetch]}
{name: role, 
roles:[evan,supervisor(temi)]}
{name: role, 
roles:[evan,supervisor(zno_two)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(want(brad,observeDescriptor(self,m3,2))),indirectSemantics,suppSemantics)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751815615)]}
{name: admin_of, 
roles:[evan,andy]}
{name: trust, 
roles:[robottwo,brad]}
{name: is_superior, 
roles:[medic,dempster]}
{name: role, 
roles:[user,supervisor(andy)]}
{name: role, 
roles:[eric,supervisor(zno)]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751853895)]}
{name: succeeded, 
roles:[recordPose(self,"screw feeder",75)]}
{name: is_superior, 
roles:[user,robotone]}
{name: role, 
roles:[evan,supervisor(andy)]}
{name: role, 
roles:[tyler,supervisor(armone)]}
{name: succeeded, 
roles:[handleWant(self,brad,self,setupPoses(self),direct)]}
{name: succeeded, 
roles:[assertBelief(self,objectDefinition(nfsv,0.075,0.09))]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751821096)]}
{name: role, 
roles:[marlow,supervisor(dempster)]}
{name: succeeded, 
roles:[handleUtterance(self,brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2)))),indirectSemantics,suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2)),semantics(deepM3(physobj_5)),semantics(bottom(physobj_5))))]}
{name: role, 
roles:[chris,supervisor(dempster)]}
{name: object, 
roles:[self,agent]}
{name: is_superior, 
roles:[evan,zno]}
{name: bel, 
roles:[robottwo,trusted(evan)]}
{name: handledSemantics, 
roles:[self,self,brad,and(self),semantics(want(brad,perceiveEntity(self,physobj_0))),suppSemantics(semantics(hole(physobj_0))),direct]}
{name: succeeded, 
roles:[modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1))]}
{name: role, 
roles:[evan,admin(fetch)]}
{name: is_superior, 
roles:[eric,temi]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(mod(replace(screwIn(self,m3,physobj_5),screwIn(self,m3,physobj_2)))),indirectSemantics,suppSemantics(semantics(m3(physobj_2)),semantics(left(physobj_2)),semantics(deepM3(physobj_5)),semantics(bottom(physobj_5))))]}
{name: succeeded, 
roles:[recordPose(self,"work area",0)]}
{name: is_superior, 
roles:[marlow,robotone]}
{name: handled, 
roles:[self,utterance(brad,self,and(self),semantics(want(brad,moveConveyorForward(self))),indirectSemantics,suppSemantics)]}
{name: role, 
roles:[medic,supervisor(self:agent)]}
{name: role, 
roles:[brad,admin(armone)]}
{name: succeeded, 
roles:[assertBelief(self,objectDefinition(m3,0.075,0.09))]}
{name: bel, 
roles:[zno,trusted(brad)]}
{name: is_superior, 
roles:[evan,shafer]}
{name: is_superior, 
roles:[eric,fetch]}
{name: handled, 
roles:[self,self,want(brad,modifyAssemble(self,assemble(self,physobj_4),assemble(self,physobj_1))),direct]}
{name: is_superior, 
roles:[eric,andy]}
{name: is_superior, 
roles:[eric,zno_two]}
{name: succeeded, 
roles:[joinOnGoal(self,1686751822296)]}
{name: is_superior, 
roles:[evan,armtwo]}
{name: is_superior, 
roles:[chris,robottwo]}
{name: role, 
roles:[evan,admin(andy)]}
{name: admin_of, 
roles:[brad,armone]}
{name: role, 
roles:[ravenna,supervisor(zno_two)]}
{name: role, 
roles:[ravenna,supervisor(fetch)]}
{name: is_superior, 
roles:[marlow,self:agent]}
{name: succeeded, 
roles:[handleWant(self,brad,self,screwIn(self,m3,physobj_3),direct)]}
{name: have, 
roles:[robottwo,exists(X,name(X))]}
{name: handled, 
roles:[self,self,want(brad,getOn(self,physobj_1,pose_1)),direct]}