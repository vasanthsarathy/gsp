{
  "testName" : "screwingActionModificationTestOrdered",
  "testlets" : [ {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[setup, poses],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,setupPoses(self:agent),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,setupPoses(self:agent),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,setupPoses(self:agent)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[Define, new, screw, type, M3],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineScrewType(self:agent,m3),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineScrewType(self:agent,m3),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,defineScrewType(self:agent,m3)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[150, millinewton, meters],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(150,mNm),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(150,mNm),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(150,mNm),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[300, millinewton, meters],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(300,mNm),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(300,mNm),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(300,mNm),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[6500, degrees],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(6500,deg),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(6500,deg),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,val(6500,deg),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[pose, screw, feeder],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,pose(VAR0),{screw feeder(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[pose(pose_2:pose)],{screw feeder(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[pose(pose_2:pose)],{screw feeder(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[I, will, teach, you, how, to, screw, a, screw, into, a, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,will(teach(brad,self:agent,to(screwIn(self:agent,screw,VAR0)))),{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[will(teach(brad,self:agent,to(screwIn(self:agent,screw,physobj_0:physobj))))],{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,physobj_0:physobj),start))],{hole(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[first, verify, that, you, can, see, the, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,perceiveEntity(self:agent,VAR0),{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[perceiveEntity(self:agent,physobj_0:physobj)],{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,perceiveEntity(self:agent,physobj_0:physobj))],{hole(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, mount, the, screw],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,mountScrew(self:agent,screw),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,mountScrew(self:agent,screw),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,mountScrew(self:agent,screw)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, align, with, the, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,alignWith(self:agent,VAR0),{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[alignWith(self:agent,physobj_0:physobj)],{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,alignWith(self:agent,physobj_0:physobj))],{hole(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, run, the, screwdriver, job, of, the, screw],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,runScrewdriverJob(self:agent,screw),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,runScrewdriverJob(self:agent,screw),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,runScrewdriverJob(self:agent,screw)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[That, is, how, you, screw, a, screw, into, a, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,endTeaching(self:agent,screwIn(self:agent,screw,VAR0)),{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[endTeaching(self:agent,screwIn(self:agent,screw,physobj_0:physobj))],{hole(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[want(brad,updateActionLearning(self:agent,screwIn(self:agent,screw,physobj_0:physobj),end))],{hole(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[define, new, item, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineItem(self:agent,nfsv),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineItem(self:agent,nfsv),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nfsv)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[job, circuit, breaker, face],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(cbDet),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(cbDet),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(cbDet),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[I, will, teach, you, how, to, assemble, a, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,will(teach(brad,self:agent,to(assemble(VAR0)))),{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[will(teach(brad,self:agent,to(assemble(physobj_1:physobj))))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[want(brad,startLearningAssembleScript(self:agent,physobj_1:physobj))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[first, go, to, pose, conveyor],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,gotoCamerapose(self:agent,VAR0),{conveyor(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[gotoCamerapose(self:agent,pose_0:pose)],{conveyor(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,gotoCamerapose(self:agent,pose_0:pose))],{conveyor(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, verify, that, you, can, see, the, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,perceiveEntity(self:agent,VAR0),{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[perceiveEntity(self:agent,physobj_1:physobj)],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,perceiveEntity(self:agent,physobj_1:physobj))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[Then, get, the, NFSV, on, the, work, area],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,getOn(self:agent,VAR0,VAR1),{nfsv(VAR0),work area(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[getOn(self:agent,physobj_1:physobj,pose_1:pose)],{nfsv(VAR0),work area(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,getOn(self:agent,physobj_1:physobj,pose_1:pose))],{nfsv(VAR0),work area(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, search, for, 2, m3, holes],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,observeDescriptor(self:agent,m3,2),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,observeDescriptor(self:agent,m3,2),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,observeDescriptor(self:agent,m3,2)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[screw, a, M3, screw, into, the, left, M3, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,screwIn(self:agent,m3,VAR0),{m3(VAR0),left(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[screwIn(self:agent,m3,physobj_2:physobj)],{m3(VAR0),left(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,screwIn(self:agent,m3,physobj_2:physobj))],{m3(VAR0),left(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, go, to, pose, work, area],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,gotoCamerapose(self:agent,VAR0),{work area(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[gotoCamerapose(self:agent,pose_1:pose)],{work area(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,gotoCamerapose(self:agent,pose_1:pose))],{work area(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[screw, a, M3, screw, into, the, right, M3, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,screwIn(self:agent,m3,VAR0),{m3(VAR0),right(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[screwIn(self:agent,m3,physobj_3:physobj)],{m3(VAR0),right(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,screwIn(self:agent,m3,physobj_3:physobj))],{m3(VAR0),right(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, get, the, NFSV, on, the, conveyor],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,getOn(self:agent,VAR0,VAR1),{nfsv(VAR0),conveyor(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[getOn(self:agent,physobj_1:physobj,pose_0:pose)],{nfsv(VAR0),conveyor(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,getOn(self:agent,physobj_1:physobj,pose_0:pose))],{nfsv(VAR0),conveyor(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[then, advance, the, conveyor, belt],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,moveConveyorForward(self:agent),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,moveConveyorForward(self:agent),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,moveConveyorForward(self:agent)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[that, is, how, you, assemble, a, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,endTeaching(self:agent,assemble(VAR0)),{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[endTeaching(self:agent,assemble(physobj_1:physobj))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "STATEMENT(brad,self:agent,[want(brad,endLearningAssembleScript(self:agent,physobj_1:physobj))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[assemble, a, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,assemble(self:agent,VAR0),{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[assemble(self:agent,physobj_1:physobj)],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,assemble(self:agent,physobj_1:physobj))],{nfsv(VAR0),DEFINITE(VAR0)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[define, new, item, NVFAU],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineItem(self:agent,nvfau),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,defineItem(self:agent,nvfau),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,want(brad,defineItem(self:agent,nvfau)),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[job, n, v, face],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(nvDet),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(nvDet),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,job(nvDet),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[assemble, an, NVFAU, is, like, assemble, an, NFSV],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,modifyAssemble(self:agent,assemble(self:agent,VAR0),assemble(self:agent,VAR1)),{nvfau(VAR0),nfsv(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[modifyAssemble(self:agent,assemble(self:agent,physobj_6:physobj),assemble(self:agent,physobj_1:physobj))],{nvfau(VAR0),nfsv(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,modifyAssemble(self:agent,assemble(self:agent,physobj_6:physobj),assemble(self:agent,physobj_1:physobj)))],{nvfau(VAR0),nfsv(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[replace, search, for, 2, m3, holes, with, search, for, 2, deep, m3, holes],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(replace(observeDescriptor(self:agent,deepM3,2),observeDescriptor(self:agent,m3,2))),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(replace(observeDescriptor(self:agent,deepM3,2),observeDescriptor(self:agent,m3,2))),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(replace(observeDescriptor(self:agent,deepM3,2),observeDescriptor(self:agent,m3,2))),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[replace, screw, an, M3, screw, into, the, left, M3, hole, with, screw, an, M3, screw, into, the, bottom, deep, M3, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),left(VAR0),deepM3(VAR1),bottom(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[mod(replace(screwIn(self:agent,m3,physobj_7:physobj),screwIn(self:agent,m3,physobj_2:physobj)))],{m3(VAR0),left(VAR0),deepM3(VAR1),bottom(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[mod(replace(screwIn(self:agent,m3,physobj_7:physobj),screwIn(self:agent,m3,physobj_2:physobj)))],{m3(VAR0),left(VAR0),deepM3(VAR1),bottom(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[replace, screw, an, M3, screw, into, the, right, M3, hole, with, screw, an, M3, screw, into, the, top, deep, M3, hole],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(replace(screwIn(self:agent,m3,VAR1),screwIn(self:agent,m3,VAR0))),{m3(VAR0),right(VAR0),deepM3(VAR1),top(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[mod(replace(screwIn(self:agent,m3,physobj_8:physobj),screwIn(self:agent,m3,physobj_3:physobj)))],{m3(VAR0),right(VAR0),deepM3(VAR1),top(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,[mod(replace(screwIn(self:agent,m3,physobj_8:physobj),screwIn(self:agent,m3,physobj_3:physobj)))],{m3(VAR0),right(VAR0),deepM3(VAR1),top(VAR1),DEFINITE(VAR0),DEFINITE(VAR1)})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[that, is, all],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(none),{})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(none),{})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "UNKNOWN(brad,self:agent,mod(none),{})" ]
    } ]
  }, {
    "serviceCalls" : [ {
      "serviceName" : "textToSemantics",
      "serviceArgs" : [ "_(brad,self:agent,[assemble, an, NVFAU],{})" ]
    }, {
      "serviceName" : "resolveReferences",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,assemble(self:agent,VAR0),{nvfau(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "addPragmaticMeaning",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[assemble(self:agent,physobj_6:physobj)],{nvfau(VAR0),DEFINITE(VAR0)})" ]
    }, {
      "serviceName" : "submitDialogGoal",
      "serviceArgs" : [ "INSTRUCT(brad,self:agent,[want(brad,assemble(self:agent,physobj_6:physobj))],{nvfau(VAR0),DEFINITE(VAR0)})" ]
    } ]
  } ]
}